(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    326441,       6421]
NotebookOptionsPosition[    320620,       6239]
NotebookOutlinePosition[    320976,       6255]
CellTagsIndexPosition[    320933,       6252]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Symbolic Regression of Pendulum Data", "Title",
 CellChangeTimes->{{3.657907353396326*^9, 3.657907372858348*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Chapter",
 CellChangeTimes->{{3.65790738033044*^9, 3.6579073877139387`*^9}}],

Cell[CellGroupData[{

Cell["Lagrangians", "Section",
 CellChangeTimes->{{3.657976198510762*^9, 3.6579762041136703`*^9}}],

Cell[CellGroupData[{

Cell["Euler Lagrange Equations", "Subsection",
 CellChangeTimes->{{3.657976354710597*^9, 3.657976360229952*^9}}],

Cell["", "Text",
 CellChangeTimes->{{3.6579763807075043`*^9, 3.657976381971414*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.657976375693531*^9, 3.6579763780117617`*^9}}],

Cell[BoxData[""], "Code"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Converting Expression from Cloure.", "Subsection",
 CellChangeTimes->{{3.657975424810863*^9, 3.6579754341385183`*^9}}],

Cell[BoxData[""], "Code"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Single Pendulum ", "Section",
 CellChangeTimes->{{3.657907391833488*^9, 3.6579073956015787`*^9}}],

Cell[CellGroupData[{

Cell["Theoretical Lagrangian", "Subsection",
 CellChangeTimes->{{3.6579779197164373`*^9, 3.657977934499571*^9}}],

Cell["Theoretical single pendulum Lagrangian is of the form:", "Text",
 CellChangeTimes->{{3.657976041737533*^9, 3.657976054814949*^9}, {
   3.657976248897716*^9, 3.657976257655773*^9}, {3.657976413896048*^9, 
   3.6579764150346603`*^9}, {3.657977070430162*^9, 3.65797715156367*^9}, {
   3.657977303760529*^9, 3.657977314153125*^9}, 3.6579774150822887`*^9, {
   3.6579778110457163`*^9, 3.65797781417072*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[GridBox[{
    {
     RowBox[{
      SuperscriptBox[GridBox[{
         {
          RowBox[{"L", "=", 
           RowBox[{
            FractionBox["1", "2"], 
            RowBox[{
             SuperscriptBox["mr", "2"], "(", 
             FractionBox["d\[Theta]", "dt"], ")"}]}]}]}
        },
        GridBoxAlignment->{"Columns" -> {{"Center"}}}], "2"], "-", 
      RowBox[{"mgr", "(", 
       RowBox[{"1", "-", "cos\[Theta]"}], ")"}]}]}
   },
   GridBoxItemSize->{"Columns" -> {{
        Scaled[0.96]}}}], TraditionalForm]]]], "Text",
 CellChangeTimes->{{3.657977168019429*^9, 3.6579772010567827`*^9}, {
  3.657977275668227*^9, 3.657977275668275*^9}, {3.657977318939361*^9, 
  3.65797740946275*^9}, {3.658652408563385*^9, 3.658652439450273*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"mass", "=", "1"}], "\n", 
 RowBox[{"length", "=", "1"}], "\n", 
 RowBox[{
  RowBox[{"gravity", "=", "1"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"simplepenlag", "[", 
   RowBox[{"theta_", ",", "thetaprime_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "2"], "*", "mass", "*", 
     SuperscriptBox["length", "2"], "*", 
     SuperscriptBox["thetaprime", "2"]}], ")"}], "-", 
   RowBox[{"mass", "*", "gravity", "*", "length", "*", 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"Cos", "[", "theta", "]"}]}], ")"}]}]}]}]}], "Code",
 CellChangeTimes->{{3.657976442524692*^9, 3.657976451649094*^9}, {
  3.657976512668154*^9, 3.65797658841782*^9}, {3.6579766654514837`*^9, 
  3.657976684885228*^9}, {3.6579767236969852`*^9, 3.657976728321679*^9}, {
  3.657977010337659*^9, 3.657977017462603*^9}, {3.6579774395680647`*^9, 
  3.657977480837964*^9}, {3.657977545438569*^9, 3.657977576588975*^9}, {
  3.657978889055902*^9, 3.657978893079102*^9}, {3.657979203672071*^9, 
  3.657979214887937*^9}}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{3.657977602000619*^9, 3.6579788936076117`*^9, 
  3.657979217371531*^9, 3.6585802513755407`*^9, 3.65858223690242*^9, 
  3.65858814771134*^9, 3.658596145703044*^9}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{3.657977602000619*^9, 3.6579788936076117`*^9, 
  3.657979217371531*^9, 3.6585802513755407`*^9, 3.65858223690242*^9, 
  3.65858814771134*^9, 3.658596145707692*^9}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{3.657977602000619*^9, 3.6579788936076117`*^9, 
  3.657979217371531*^9, 3.6585802513755407`*^9, 3.65858223690242*^9, 
  3.65858814771134*^9, 3.658596145710759*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"singpendata", " ", "=", " ", 
   RowBox[{
    RowBox[{
    "Import", "[", 
     "\"\</Users/joelrussell/Documents/Imperial/Year_4/Masters_Project/Code/\
joel_flow/flow/data/mma_pendulum_large.csv\>\"", "]"}], " ", "//", 
    "Short"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"theta", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
      "&"}], "/@", "singpendata"}], "}"}]}], " "}], "\n", 
 RowBox[{"thetaprime", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
     "&"}], "/@", "singpendata"}], "}"}]}]}], "Code",
 CellChangeTimes->{{3.657977968074471*^9, 3.657977979618013*^9}, {
  3.657978029047814*^9, 3.6579780739342833`*^9}, {3.657978879185731*^9, 
  3.657978915837264*^9}, {3.658588826330072*^9, 3.6585888295341187`*^9}}],

Cell[BoxData[
 FormBox[
  TagBox[
   RowBox[{"(", "\[NoBreak]", 
    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "\[NoBreak]", ")"}],
   
   Short], TraditionalForm]], "Output",
 CellChangeTimes->{
  3.657977602004406*^9, {3.657978039019665*^9, 3.657978074498407*^9}, 
   3.657978798241372*^9, 3.657978898490533*^9, 3.65797895210566*^9, 
   3.6579830550542583`*^9, 3.658580251892943*^9, 3.658582236938305*^9, 
   3.658588147765201*^9, 3.658588830289339*^9, 3.65859614589256*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"2.9845130209103035`", ",", 
      RowBox[{"-", "2.710505431213761`*^-20"}]}], "}"}],
    Short], "}"}], TraditionalForm]], "Output",
 CellChangeTimes->{
  3.657977602004406*^9, {3.657978039019665*^9, 3.657978074498407*^9}, 
   3.657978798241372*^9, 3.657978898490533*^9, 3.65797895210566*^9, 
   3.6579830550542583`*^9, 3.658580251892943*^9, 3.658582236938305*^9, 
   3.658588147765201*^9, 3.658588830289339*^9, 3.658596145898224*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"2.9813738970592296`", ",", 
      RowBox[{"-", "0.06298663953496045`"}]}], "}"}],
    Short], "}"}], TraditionalForm]], "Output",
 CellChangeTimes->{
  3.657977602004406*^9, {3.657978039019665*^9, 3.657978074498407*^9}, 
   3.657978798241372*^9, 3.657978898490533*^9, 3.65797895210566*^9, 
   3.6579830550542583`*^9, 3.658580251892943*^9, 3.658582236938305*^9, 
   3.658588147765201*^9, 3.658588830289339*^9, 3.658596145901576*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ListPlot", "[", 
  RowBox[{"theta", ",", 
   RowBox[{"AxesLabel", "\[Rule]", "\[Theta]"}]}], "]"}], "\n", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"thetaprime", ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"\[Theta]", "'"}]}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.6579776084163713`*^9, 3.6579776128163424`*^9}, {
  3.65797782061232*^9, 3.657977868122884*^9}, {3.6579780948237867`*^9, 
  3.657978187674889*^9}, {3.657978263916733*^9, 3.65797833168843*^9}, {
  3.657978387381384*^9, 3.657978423585688*^9}, {3.6579784868441668`*^9, 
  3.657978521435817*^9}, {3.6579785560872498`*^9, 3.657978623792055*^9}, {
  3.657978673008141*^9, 3.65797868862179*^9}, {3.657978921996715*^9, 
  3.657978934893383*^9}, {3.657978973172855*^9, 3.657979042082131*^9}, {
  3.657979097598097*^9, 3.657979106792088*^9}}],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, 
     FormBox["\[Theta]", TraditionalForm]},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{},
   PlotRange->{{0., 2.9845130209103035`}, {-5.421010862427522*^-20, 0}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.02]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{
  3.65797852254412*^9, {3.657978583071807*^9, 3.657978595850195*^9}, 
   3.657978689722925*^9, {3.657978924191944*^9, 3.6579789557768803`*^9}, 
   3.6579790286890163`*^9, {3.657979099688818*^9, 3.6579791339144287`*^9}, 
   3.657983059080999*^9, 3.658580253900667*^9, 3.658582236996295*^9, 
   3.6585881478185787`*^9, 3.658596146318651*^9}],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, 
     FormBox[
      SuperscriptBox["\[Theta]", "\[Prime]", MultilineFunction -> None], 
      TraditionalForm]},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{},
   PlotRange->{{0., 2.9813738970592296`}, {-0.1259732790699209, 0}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.02]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{
  3.65797852254412*^9, {3.657978583071807*^9, 3.657978595850195*^9}, 
   3.657978689722925*^9, {3.657978924191944*^9, 3.6579789557768803`*^9}, 
   3.6579790286890163`*^9, {3.657979099688818*^9, 3.6579791339144287`*^9}, 
   3.657983059080999*^9, 3.658580253900667*^9, 3.658582236996295*^9, 
   3.6585881478185787`*^9, 3.658596146386888*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"simplepenlag", "[", 
    RowBox[{"theta", ",", "thetaprime"}], "]"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", "lagrangian"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.657979238879616*^9, 3.6579793412897882`*^9}}],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, 
     FormBox["lagrangian", TraditionalForm]},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{},
   PlotRange->{{0., 2.9845130209103035`}, {-0.06298663953496045, 0}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.02]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{3.657979341701082*^9, 3.657983062678719*^9, 
  3.6585802544342937`*^9, 3.658582237074995*^9, 3.6585881479002237`*^9, 
  3.6585961464629602`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Numerical Lagrangian Expressions", "Subsection",
 CellChangeTimes->{{3.657980094521379*^9, 3.657980099343911*^9}, {
  3.657987968597802*^9, 3.657987975907693*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"triallag1", "[", 
   RowBox[{"theta_", ",", "omega_"}], "]"}], ":=", 
  RowBox[{"Times", "[", 
   RowBox[{
    RowBox[{"Times", "[", 
     RowBox[{"0.022210588271571317", ",", " ", 
      RowBox[{"Plus", "[", 
       RowBox[{
        RowBox[{"Plus", "[", 
         RowBox[{
          RowBox[{"Plus", "[", 
           RowBox[{
            RowBox[{"Plus", "[", 
             RowBox[{
              RowBox[{"Plus", "[", 
               RowBox[{
                RowBox[{"Plus", "[", 
                 RowBox[{
                  RowBox[{"Plus", "[", 
                   RowBox[{
                    RowBox[{"Cos", "[", "omega", "]"}], ",", " ", 
                    RowBox[{"Cos", "[", "theta", "]"}]}], "]"}], ",", " ", 
                  RowBox[{"Times", "[", 
                   RowBox[{
                    RowBox[{"Cos", "[", "theta", "]"}], ",", " ", 
                    "0.6247552574671112"}], "]"}]}], "]"}], ",", " ", 
                RowBox[{"Cos", "[", "theta", "]"}]}], "]"}], ",", " ", 
              RowBox[{"Times", "[", 
               RowBox[{
                RowBox[{"Plus", "[", 
                 RowBox[{
                  RowBox[{"Plus", "[", 
                   RowBox[{
                    RowBox[{"Plus", "[", 
                    RowBox[{
                    RowBox[{"Plus", "[", 
                    RowBox[{
                    RowBox[{"Cos", "[", "omega", "]"}], ",", " ", 
                    RowBox[{"Cos", "[", "theta", "]"}]}], "]"}], ",", " ", 
                    RowBox[{"Cos", "[", "theta", "]"}]}], "]"}], ",", " ", 
                    RowBox[{"Cos", "[", "theta", "]"}]}], "]"}], ",", " ", 
                  RowBox[{"Cos", "[", "theta", "]"}]}], "]"}], ",", " ", 
                RowBox[{"Cos", "[", "theta", "]"}]}], "]"}]}], "]"}], ",", 
            " ", "omega"}], "]"}], ",", " ", "omega"}], "]"}], ",", " ", 
        RowBox[{"Cos", "[", "theta", "]"}]}], "]"}]}], "]"}], ",", " ", 
    RowBox[{"Sin", "[", "theta", "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.657980103703786*^9, 3.6579802680655622`*^9}, {
   3.657980365234992*^9, 3.657980366508477*^9}, {3.657980483649948*^9, 
   3.657980571125638*^9}, {3.657980642629971*^9, 3.65798082396385*^9}, {
   3.6579809630592813`*^9, 3.657980967114333*^9}, {3.657981036794505*^9, 
   3.657981098997617*^9}, {3.657983042500679*^9, 3.65798312518351*^9}, {
   3.657983181164074*^9, 3.657983219575015*^9}, {3.657983258241276*^9, 
   3.657983311261424*^9}, {3.657983341983242*^9, 3.657983407858684*^9}, {
   3.6579834423266497`*^9, 3.657983489044684*^9}, 3.6579843436925707`*^9, {
   3.657984408337612*^9, 3.657984410817687*^9}, {3.657984474118349*^9, 
   3.6579845934482317`*^9}, {3.657984693633033*^9, 3.657984750446106*^9}, {
   3.657984797575979*^9, 3.657984899820644*^9}, {3.6579860228254232`*^9, 
   3.6579860563537283`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"run1", "[", 
   RowBox[{"theta_", ",", "omega_"}], "]"}], ":=", 
  RowBox[{"Plus", "[", 
   RowBox[{
    RowBox[{"Sin", "[", "theta", "]"}], ",", " ", 
    RowBox[{"Plus", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{
        RowBox[{"Sin", "[", "theta", "]"}], ",", " ", 
        RowBox[{"Cos", "[", "theta", "]"}]}], "]"}], ",", " ", 
      RowBox[{"Times", "[", 
       RowBox[{
        RowBox[{"Times", "[", 
         RowBox[{
          RowBox[{"Sin", "[", "theta", "]"}], ",", " ", 
          "0.12642579887098596"}], "]"}], ",", " ", 
        RowBox[{"Times", "[", 
         RowBox[{"omega", ",", " ", "omega"}], "]"}]}], "]"}]}], "]"}]}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"run2", "[", 
    RowBox[{"theta_", ",", "omega_"}], "]"}], ":=", 
   RowBox[{"Times", "[", 
    RowBox[{
     RowBox[{"Plus", "[", 
      RowBox[{
       RowBox[{"Plus", "[", 
        RowBox[{
         RowBox[{"Sin", "[", "theta", "]"}], ",", " ", 
         RowBox[{"Subtract", "[", 
          RowBox[{
           RowBox[{"Plus", "[", 
            RowBox[{
             RowBox[{"Sin", "[", "theta", "]"}], ",", " ", 
             "1.9273329585287498"}], "]"}], ",", " ", 
           RowBox[{"Sin", "[", "theta", "]"}]}], "]"}]}], "]"}], ",", " ", 
       RowBox[{"Plus", "[", 
        RowBox[{
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"Sin", "[", "theta", "]"}], ",", " ", 
           RowBox[{"Cos", "[", "theta", "]"}]}], "]"}], ",", " ", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"Times", "[", 
            RowBox[{
             RowBox[{"Sin", "[", "theta", "]"}], ",", " ", 
             "0.12641372676463694"}], "]"}], ",", " ", 
           RowBox[{"Times", "[", 
            RowBox[{"omega", ",", " ", "omega"}], "]"}]}], "]"}]}], "]"}]}], 
      "]"}], ",", " ", "0.06703977631709543"}], "]"}]}], "\n"}], "\n", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"run1", "[", 
   RowBox[{"theta", ",", "thetaprime"}], "]"}], "]"}], "\n", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"run2", "[", 
   RowBox[{"theta", ",", "thetaprime"}], "]"}], "]"}]}], "Code",
 CellChangeTimes->{{3.657983533193964*^9, 3.6579835850085278`*^9}, {
   3.6579836292538357`*^9, 3.65798367888377*^9}, {3.657983720588176*^9, 
   3.65798387588538*^9}, {3.6579839902436447`*^9, 3.657984248960548*^9}, {
   3.65798428865662*^9, 3.657984382570148*^9}, {3.657984427959187*^9, 
   3.65798443673339*^9}, {3.657984756558358*^9, 3.6579847874045467`*^9}, {
   3.657985706587204*^9, 3.657985744315577*^9}, {3.6579858352671947`*^9, 
   3.6579858396582613`*^9}, {3.657985876086689*^9, 3.657985911566401*^9}, 
   3.657985952441304*^9, 3.657986357783844*^9, {3.657986450542453*^9, 
   3.6579864522045097`*^9}, {3.6579867394316463`*^9, 3.657986784466545*^9}, {
   3.657987356632112*^9, 3.657987389973316*^9}, {3.657987512495133*^9, 
   3.657987512846537*^9}}],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{},
   PlotRange->{{0., 2.9845130209103035`}, {-0.06298663953496045, 0}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.02]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.657983562681725*^9, 3.657983585392866*^9}, {
   3.6579836472653093`*^9, 3.657983666447927*^9}, {3.657983722835189*^9, 
   3.657983763682146*^9}, {3.657983808565646*^9, 3.657983813324345*^9}, 
   3.6579838738224983`*^9, 3.657983991511689*^9, {3.657984022458091*^9, 
   3.6579840540328493`*^9}, {3.657984129569415*^9, 3.657984164565839*^9}, {
   3.657984194570259*^9, 3.657984250318193*^9}, 3.657984292648559*^9, {
   3.657984353381394*^9, 3.657984377228759*^9}, 3.657984437312688*^9, 
   3.657984478367462*^9, 3.657984671720961*^9, 3.657984789043994*^9, 
   3.657985708862412*^9, 3.657985912300395*^9, 3.657986359157814*^9, 
   3.657986452716503*^9, {3.657986726706747*^9, 3.657986790520287*^9}, 
   3.657987390517301*^9, 3.658580254514297*^9, 3.658582237125375*^9, 
   3.6585881479474583`*^9, 3.658596146693776*^9}],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{},
   PlotRange->{{0., 2.9845130209103035`}, {-0.06298663953496045, 0}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.02]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.657983562681725*^9, 3.657983585392866*^9}, {
   3.6579836472653093`*^9, 3.657983666447927*^9}, {3.657983722835189*^9, 
   3.657983763682146*^9}, {3.657983808565646*^9, 3.657983813324345*^9}, 
   3.6579838738224983`*^9, 3.657983991511689*^9, {3.657984022458091*^9, 
   3.6579840540328493`*^9}, {3.657984129569415*^9, 3.657984164565839*^9}, {
   3.657984194570259*^9, 3.657984250318193*^9}, 3.657984292648559*^9, {
   3.657984353381394*^9, 3.657984377228759*^9}, 3.657984437312688*^9, 
   3.657984478367462*^9, 3.657984671720961*^9, 3.657984789043994*^9, 
   3.657985708862412*^9, 3.657985912300395*^9, 3.657986359157814*^9, 
   3.657986452716503*^9, {3.657986726706747*^9, 3.657986790520287*^9}, 
   3.657987390517301*^9, 3.658580254514297*^9, 3.658582237125375*^9, 
   3.6585881479474583`*^9, 3.658596146840827*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Euler Lagrange Equations", "Subsection",
 CellChangeTimes->{{3.657987949741593*^9, 3.657987954356464*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<VariationalMethods`\>\"", "]"}]], "Code",
 CellChangeTimes->{3.657989822587038*^9, 3.658144486576786*^9}],

Cell[CellGroupData[{

Cell["THEORETICAL", "Subsubsection",
 CellChangeTimes->{{3.657989832266961*^9, 3.6579898409068317`*^9}, 
   3.657989877481138*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"m", ",", "l", ",", "g"}], "]"}], "\n"}], "\n", 
 RowBox[{"m", " ", "=", " ", "1"}], "\n", 
 RowBox[{"l", " ", "=", " ", "1"}], "\n", 
 RowBox[{
  RowBox[{"g", " ", "=", " ", "9.8"}], "\n"}], "\n", 
 RowBox[{"\"\<Theoretical Values with Algebraic Representations of m g and \
l\>\"", "\n"}], "\n", 
 RowBox[{"theorylag", " ", "=", " ", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    SuperscriptBox["mr", "2"], 
    SuperscriptBox[
     RowBox[{
      RowBox[{"\[Theta]", "'"}], "[", "t", "]"}], "2"]}], "+", 
   RowBox[{"mgr", 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]", "[", "t", "]"}], "]"}]}], ")"}]}]}]}], "\n", 
 RowBox[{"theoryEL", " ", "=", " ", 
  RowBox[{"EulerEquations", "[", 
   RowBox[{"theorylag", ",", 
    RowBox[{"\[Theta]", "[", "t", "]"}], ",", "t"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"theorysol", " ", "=", " ", 
   RowBox[{"Solve", "[", 
    RowBox[{"theoryEL", ",", 
     RowBox[{
      RowBox[{"\[Theta]", "''"}], "[", "t", "]"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{"theorylagn", " ", "=", " ", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], "m", "*", 
    SuperscriptBox["l", "2"], "*", 
    SuperscriptBox[
     RowBox[{
      RowBox[{"\[Theta]", "'"}], "[", "t", "]"}], "2"]}], "+", 
   RowBox[{"m", "*", "g", "*", "l", "*", 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"Cos", "[", 
       RowBox[{"\[Theta]", "[", "t", "]"}], "]"}]}], ")"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"ELth", " ", "=", " ", 
   RowBox[{"EulerEquations", "[", 
    RowBox[{"theorylagn", ",", 
     RowBox[{"\[Theta]", "[", "t", "]"}], ",", "t"}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"s", " ", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"List", "[", "ELth", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Theta]", "[", "0", "]"}], " ", "\[Equal]", " ", 
        "2.9845130209103"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Theta]", "'"}], "[", "0", "]"}], " ", "\[Equal]", " ", 
        RowBox[{
         RowBox[{"-", "2.71050543121376"}], "*", 
         RowBox[{"10", "^", 
          RowBox[{"-", "20"}]}]}]}]}], "}"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"theorysoln", " ", "=", " ", 
   RowBox[{"NDSolve", "[", 
    RowBox[{"s", ",", 
     RowBox[{"\[Theta]", "[", "t", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "30"}], "}"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{
     RowBox[{"\[Theta]", "[", "t", "]"}], "/.", "theorysoln"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "30"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", 
    RowBox[{"Theoretical", " ", 
     RowBox[{"\[Theta]", "[", "t", "]"}]}]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"\[Theta]", "[", "t", "]"}]}], "}"}]}]}], "]"}], "\n"}], "Code",\

 CellChangeTimes->{{3.657989884206283*^9, 3.6579898976063747`*^9}, {
   3.6579899513437862`*^9, 3.657990161309165*^9}, {3.658042299954762*^9, 
   3.658042335218855*^9}, {3.6580423658752193`*^9, 3.658042422391417*^9}, {
   3.658042592544129*^9, 3.658042623351713*^9}, {3.658042660182555*^9, 
   3.658042717445993*^9}, {3.6580429126144657`*^9, 3.6580429156446877`*^9}, {
   3.65804295283813*^9, 3.658042955209239*^9}, {3.6580429925893393`*^9, 
   3.65804304116945*^9}, {3.6580446656422033`*^9, 3.6580447287668953`*^9}, {
   3.6580451139984093`*^9, 3.658045149327181*^9}, {3.658046193241783*^9, 
   3.658046394913291*^9}, {3.658047213091611*^9, 3.65804726429706*^9}, {
   3.6580473011109867`*^9, 3.6580473720201273`*^9}, {3.658047408013715*^9, 
   3.658047420715118*^9}, {3.658048525651888*^9, 3.658048591809044*^9}, {
   3.658048651321988*^9, 3.658048719171814*^9}, {3.658048756762425*^9, 
   3.658048764033654*^9}, {3.658048799996467*^9, 3.658048929522026*^9}, 
   3.658049642635364*^9, 3.658062191296557*^9, {3.658062337919154*^9, 
   3.6580623417958384`*^9}, {3.658062784891321*^9, 3.658062802076874*^9}, {
   3.658138820221829*^9, 3.658138835656554*^9}, {3.658138987307398*^9, 
   3.6581390209847383`*^9}, {3.6581390794382277`*^9, 
   3.6581390841094427`*^9}, {3.658139165269327*^9, 3.6581393341291437`*^9}, {
   3.658139400577141*^9, 3.6581394688156633`*^9}, {3.658139520273786*^9, 
   3.658139550501856*^9}, {3.658143523111743*^9, 3.65814353008633*^9}, {
   3.6581439849712276`*^9, 3.658144072555108*^9}, 3.6581441120848417`*^9, {
   3.658144172275138*^9, 3.6581441753696613`*^9}, {3.658144225855825*^9, 
   3.658144230462646*^9}, {3.65814428433033*^9, 3.6581443747821302`*^9}, {
   3.6581444050220203`*^9, 3.6581444795642843`*^9}, {3.658144522045959*^9, 
   3.6581445455518723`*^9}, {3.6581445927485*^9, 3.6581445973445873`*^9}, {
   3.65814482337707*^9, 3.6581448799158382`*^9}, {3.6581458603231497`*^9, 
   3.6581458734822273`*^9}, {3.658580245203388*^9, 3.658580246230068*^9}, {
   3.658580277542885*^9, 3.658580314443408*^9}, {3.658580466717927*^9, 
   3.658580482621372*^9}, {3.658582382936821*^9, 3.658582392655843*^9}, {
   3.658582463572473*^9, 3.6585824657508993`*^9}, {3.6585834341642923`*^9, 
   3.6585834362509604`*^9}, {3.65864891716267*^9, 3.658648917758358*^9}, {
   3.65864894871944*^9, 3.658648962667409*^9}, {3.65865408697194*^9, 
   3.658654097994113*^9}}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.6586489646805468`*^9}}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.658648964684576*^9}}],

Cell[BoxData[
 FormBox["9.8`", TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.658648964687354*^9}}],

Cell[BoxData[
 FormBox["\<\"Theoretical Values with Algebraic Representations of m g and \
l\"\>", TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.6586489646900473`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"mgr", " ", 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"cos", "(", 
       RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], ")"}]}], "+", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    SuperscriptBox["mr", "2"], " ", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["\[Theta]", "\[Prime]",
       MultilineFunction->None], "(", "t", ")"}], "2"]}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.658648964693121*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"mgr", " ", 
     RowBox[{"sin", "(", 
      RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], "-", 
    RowBox[{
     SuperscriptBox["mr", "2"], " ", 
     RowBox[{
      SuperscriptBox["\[Theta]", "\[Prime]\[Prime]",
       MultilineFunction->None], "(", "t", ")"}]}]}], "\[LongEqual]", "0"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.658648964696095*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[Theta]", "\[Prime]\[Prime]",
       MultilineFunction->None], "(", "t", ")"}], "\[Rule]", 
     FractionBox[
      RowBox[{"mgr", " ", 
       RowBox[{"sin", "(", 
        RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], 
      SuperscriptBox["mr", "2"]]}], "}"}], "}"}], TraditionalForm]], "Output",\

 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.658648964698852*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], " ", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["\[Theta]", "\[Prime]",
       MultilineFunction->None], "(", "t", ")"}], "2"]}], "+", 
   RowBox[{"9.8`", " ", 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"cos", "(", 
       RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], ")"}]}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.658648964701641*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"9.8`", " ", 
     RowBox[{"sin", "(", 
      RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], "-", 
    RowBox[{
     SuperscriptBox["\[Theta]", "\[Prime]\[Prime]",
      MultilineFunction->None], "(", "t", ")"}]}], "\[LongEqual]", "0"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.658648964704421*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"9.8`", " ", 
       RowBox[{"sin", "(", 
        RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], "-", 
      RowBox[{
       SuperscriptBox["\[Theta]", "\[Prime]\[Prime]",
        MultilineFunction->None], "(", "t", ")"}]}], "\[LongEqual]", "0"}], 
    ",", 
    RowBox[{
     RowBox[{"\[Theta]", "(", "0", ")"}], "\[LongEqual]", 
     "2.9845130209103`"}], ",", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[Theta]", "\[Prime]",
       MultilineFunction->None], "(", "0", ")"}], "\[LongEqual]", 
     RowBox[{"-", "2.7105054312137602`*^-20"}]}]}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.658648964708276*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Theta]", "(", "t", ")"}], "\[Rule]", 
     RowBox[{
      TagBox[
       TemplateBox[{RowBox[{
           StyleBox[
            TagBox["InterpolatingFunction", "SummaryHead"], 
            "NonInterpretableSummary"], 
           StyleBox["[", "NonInterpretableSummary"], 
           DynamicModuleBox[{Typeset`open$$ = False}, 
            PanelBox[
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwVzn0w2wcAxnGvye/3o/VSUiXUSyfxkpR4jYg8Vx2i9C1Wq5eql3Zx3sVL
GTYlqk657ZQps2puKyvdtIx17la089IcVjWuN53r6c6Gm/dkW9Tsj+eevz53
X7uEjLOXdLS0tPz39v+rmPSUIaPWgNm4lzEh83SUC6f9vwz7TXTG0n9Dakai
c1UwOnlyVeTzPHshNpFCbvqNFzV+atFhW/KB2IrE6ZMurIq3uyKlT/Kh3D3f
G17NKPHSg2i/wWLmURJlCeyEJw4EVAp+bMeeX+Ok0kMvG6KIJ497pE3C09yF
nRdqjCFl8NinC3TUjq2vKoWmeBxVaV0dTEIQXXM5MNoMZmfypJGxFGiKoo9/
jGCgLytDl7tE4JxuwLL4uAXuBPzNjnhNhypgSm8z1hIN46VrihgS37n/MKCQ
MGFAsfpiLlL4aTfPRSazgUvHgqhzhgBn46qs7bgtkjp8OXMrdNAGZQ63hHYw
rPjq2550EpUl4+1NJ+xRRvJbqiQUGuvP6twOdsD5OXGL2zABSTPcu98/ghH2
g+IPVXSc4lpcn0h6B3bMIZWsk8RLq0MPVy44IoDJ2xwUU9ivKntolc6CiD+9
MlpF4GeORUVYChuhB6vDjukQmFm9WVqe6IT7fVLz560k5K3FEmWmM6Z6Gw0P
iygMdtaoGKku2B0gGwobCLTdJbOzilyxszNzpWgfgUlOuvnUNQ60hI51gpm9
fiNNlU8pFznZI53BnhQWX238cq/2KBz7U+mSJALL5VWFJkFuGOR6Hqi1ICCf
N2qZHHDD48qtta+HSazzxjoOhrjj6QBf/cyJAsuj8cjFp+7YlibODOYQcHP+
/JpbOA8Zs8MytT0B7YkeiY6SB/2b/1jmz5PY4Ad2R4Z44PaIc7OGS+H7Jn0t
rwkPBPYT+2piCQTf+7X7QLgnLEipaSOTQHvXYkThtCccTmkYxVskXEuSrydF
e8Fm58WylEYhX/3W8fSsFwRpjjb/ignUJ49+MxTnjbqoDTNeEIHiyrZW31fe
OLappJF0CvI0Dcs9ygdM++aWLmMK8WJ5Y9e8Dzbrl8Yf8QnoT9nneFzwRZdJ
v43cb89LtvjC332h+kP3apY5BcYt/7qxFD64U0+2ZW9I5Nd8Fnl+kY/XKxlD
ea4EOgqcaJkZfphiOFS/ubTXbzphXbnih7uf0LyN7SgU3mm3ZecJEO/ZrJus
JJGmVvee0AiwHnXfJIhGgKWJ6css8EfzuaUmXgmBnu0thbW2EFu0XNFfgRQM
vlCon30kxFzBn+nx3SRCba6odneF6Hiv9oN39Qj8B0+8iiQ=
                    "]]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 2.95}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None}, 
                    PlotRange -> {{0., 30.}, {2.9845130209105086`, 
                    3.2986686022963982`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"(", "\[NoBreak]", 
                    
                    GridBox[{{"0.`", "30.`"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwVzn0w2wcAxnGvye/3o/VSUiXUSyfxkpR4jYg8Vx2i9C1Wq5eql3Zx3sVL
GTYlqk657ZQps2puKyvdtIx17la089IcVjWuN53r6c6Gm/dkW9Tsj+eevz53
X7uEjLOXdLS0tPz39v+rmPSUIaPWgNm4lzEh83SUC6f9vwz7TXTG0n9Dakai
c1UwOnlyVeTzPHshNpFCbvqNFzV+atFhW/KB2IrE6ZMurIq3uyKlT/Kh3D3f
G17NKPHSg2i/wWLmURJlCeyEJw4EVAp+bMeeX+Ok0kMvG6KIJ497pE3C09yF
nRdqjCFl8NinC3TUjq2vKoWmeBxVaV0dTEIQXXM5MNoMZmfypJGxFGiKoo9/
jGCgLytDl7tE4JxuwLL4uAXuBPzNjnhNhypgSm8z1hIN46VrihgS37n/MKCQ
MGFAsfpiLlL4aTfPRSazgUvHgqhzhgBn46qs7bgtkjp8OXMrdNAGZQ63hHYw
rPjq2550EpUl4+1NJ+xRRvJbqiQUGuvP6twOdsD5OXGL2zABSTPcu98/ghH2
g+IPVXSc4lpcn0h6B3bMIZWsk8RLq0MPVy44IoDJ2xwUU9ivKntolc6CiD+9
MlpF4GeORUVYChuhB6vDjukQmFm9WVqe6IT7fVLz560k5K3FEmWmM6Z6Gw0P
iygMdtaoGKku2B0gGwobCLTdJbOzilyxszNzpWgfgUlOuvnUNQ60hI51gpm9
fiNNlU8pFznZI53BnhQWX238cq/2KBz7U+mSJALL5VWFJkFuGOR6Hqi1ICCf
N2qZHHDD48qtta+HSazzxjoOhrjj6QBf/cyJAsuj8cjFp+7YlibODOYQcHP+
/JpbOA8Zs8MytT0B7YkeiY6SB/2b/1jmz5PY4Ad2R4Z44PaIc7OGS+H7Jn0t
rwkPBPYT+2piCQTf+7X7QLgnLEipaSOTQHvXYkThtCccTmkYxVskXEuSrydF
e8Fm58WylEYhX/3W8fSsFwRpjjb/ignUJ49+MxTnjbqoDTNeEIHiyrZW31fe
OLappJF0CvI0Dcs9ygdM++aWLmMK8WJ5Y9e8Dzbrl8Yf8QnoT9nneFzwRZdJ
v43cb89LtvjC332h+kP3apY5BcYt/7qxFD64U0+2ZW9I5Nd8Fnl+kY/XKxlD
ea4EOgqcaJkZfphiOFS/ubTXbzphXbnih7uf0LyN7SgU3mm3ZecJEO/ZrJus
JJGmVvee0AiwHnXfJIhGgKWJ6css8EfzuaUmXgmBnu0thbW2EFu0XNFfgRQM
vlCon30kxFzBn+nx3SRCba6odneF6Hiv9oN39Qj8B0+8iiQ=
                    "]]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 2.95}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None}, 
                    PlotRange -> {{0., 30.}, {2.9845130209105086`, 
                    3.2986686022963982`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"(", "\[NoBreak]", 
                    
                    GridBox[{{"0.`", "30.`"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic], 
             BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
           StyleBox["]", "NonInterpretableSummary"]}]},
        "CopyTag",
        DisplayFunction->(#& ),
        InterpretationFunction->("InterpolatingFunction[{{0., 30.}}, <>]"& )],
       
       False,
       Editable->False,
       SelectWithContents->True,
       Selectable->False], "\[InvisibleApplication]", 
      RowBox[{"(", "t", ")"}]}]}], "}"}], "}"}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.658648964744974*^9}}],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
ArXLwsdOj7Agop5bV475sNkBgzf9Yzj+a4naAsyXu1sPhJz/h+vFe/7DeicK
2MqaOA2Ks8FrexlNGvPty4L3Wo6SbFhZwtw+sZICEn5RQ1lSbIjrePX05moK
eGVYvBol2EA/3X5bH/n5sKrlwnIZNly3sSnxwHxfbSwuMFuWDcZHFqx3Qv6G
LGDaT8mxYcLNkz2FftHk9kVjlSIbBvOd+/yQ34y4xN/5SmzYsV+Rexr5nnyX
+0JChQ26G+ObDiH/+zs7MtznsmH11Q1pC9APnGYn+xeqscFKXtE9Ect5iy0X
S89jg9aCf1Ki/aBE0I+5GzTZwIvddOYoln0up/4q1sb6mHmq6mP5aYN1hYwe
G6KOD2Tsw/NrT+tL22jABoung1bJeP0DtAy/+wvYsFhWQ7gZ69fibWclb8IG
9anOV3+w/rwTf5S3mrGhiXKSZ4XtSy+/8KPMgg0DsgrfHLH9Q30Oj5TobHBZ
P2CigvFxnT9y0pfJht9lLomZGL+bzpe3PWGzYcPr5zHdGN8Qp7JBBx4b/j6e
CLmxHH3AselQo4ANnw/LzjHG/pnu0CfnuZANkS57F663p0C1PXGuy4oNOUtu
tdguxngt0TLaYyOK98ivLvRLdzve3XFbNlSrU2JtBBTotPGrm+nIhtf9D76Y
oJ9eWxS9Id2ZDSGJC9VK0S8CrM//1HJhw66aBy9I9AsxqJ3OXM2G2jdTqp2q
FFDlM3hrvdhQYPA1+PU/Etq4Ti/aN7LhYBo/U/R+iWyOj+uuLWzMC32l/qB/
M1jpuw7uYEPA6cFhR/T1ZdSJrOxANlSU39dqeURClMFTmb9xGH+TXeIQTMJS
/db0fUfZsMxS8VaqHwkKekN60sfY8GqplPjHjSSc1zYE1ZNs+Coeo8RaRsJ9
jYRAOIfjYd9d2TADEn7Ncm1NuMmGyk/lX9e/J6BYceeO2cVsiJ5tmXqrhoBw
hZjhC3fw8w6eNWq43hBy9xSKHrBhUrqEw7xFgA5F3fbDMzaIO/YeeppIwA+C
2bDxJRtiy+xkpqIIKJR29uqpYsM+5ffcDREEWE6PDPv3BsdblszoGV/kv1h7
gV4ztu+kY7GlIwFn5g13H25hIweK5m1cTECLgKL39RMb5C9zq4stCfAMtcg4
/40Np4rlT/fi+pyZtqhpooMNU3KSe5pw/f56e7XC2i427Hz2XOwv5oc+vyNi
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
CaH2UtGOxciL/wHvAMlO
      "]]}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{
     FormBox["t", TraditionalForm], 
     FormBox[
      RowBox[{"\[Theta]", "(", "t", ")"}], TraditionalForm]},
   AxesOrigin->{0, 2.97},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotLabel->FormBox[
     RowBox[{"Theoretical", " ", 
       RowBox[{"\[Theta]", "(", "t", ")"}]}], TraditionalForm],
   PlotRange->{All, All},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.658139394001772*^9, 3.658139426168735*^9}, {
   3.658139456392886*^9, 3.658139469371277*^9}, 3.658139553666401*^9, 
   3.658143530677259*^9, {3.658143987098384*^9, 3.6581440687996807`*^9}, 
   3.6581441125243397`*^9, 3.658144175921002*^9, {3.658144362620184*^9, 
   3.658144376474072*^9}, 3.6581444116828403`*^9, {3.658144468580472*^9, 
   3.658144493557905*^9}, {3.6581445250680523`*^9, 3.65814455010814*^9}, {
   3.658144587337923*^9, 3.658144597860231*^9}, {3.658144829938507*^9, 
   3.6581448917261047`*^9}, 3.658145874915032*^9, {3.658580254793738*^9, 
   3.658580314961156*^9}, {3.658580456203156*^9, 3.658580483127578*^9}, {
   3.658582237218334*^9, 3.6585822379460506`*^9}, {3.658582372307489*^9, 
   3.658582394672924*^9}, 3.658582430452652*^9, {3.658582466967136*^9, 
   3.6585824794895267`*^9}, 3.658582661941794*^9, 3.6585830752086782`*^9, 
   3.658583363559634*^9, {3.658583437984248*^9, 3.658583449686174*^9}, 
   3.6585835031697063`*^9, 3.658583575676477*^9, 3.658586936326096*^9, {
   3.658588148064804*^9, 3.6585881712818327`*^9}, 3.658588320283793*^9, 
   3.658596147002935*^9, 3.658648918307083*^9, {3.6586489497488613`*^9, 
   3.6586489648047123`*^9}}]
}, Open  ]],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
      "]]}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{
     FormBox["t", TraditionalForm], 
     FormBox[
      RowBox[{"\[Theta]", "(", "t", ")"}], TraditionalForm]},
   AxesOrigin->{0, 2.97},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotLabel->FormBox[
     RowBox[{"Theoretical", " ", 
       RowBox[{"\[Theta]", "(", "t", ")"}]}], TraditionalForm],
   PlotRange->{All, All},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Input",
 CellChangeTimes->{3.658583570881011*^9}],

Cell[CellGroupData[{

Cell[BoxData["\"\<theorylag[mass_,length_,gravity_] := \
\!\(\*FractionBox[\(1\), \(2\)]\)mass*\!\(\*SuperscriptBox[\(length\), \(2\)]\
\)*\>\""], "Code",
 CellChangeTimes->{{3.6580451659098263`*^9, 3.658045259618123*^9}, {
  3.6580453182664347`*^9, 3.658045321775775*^9}}],

Cell[BoxData[
 FormBox["\<\"theorylag[mass_,length_,gravity_] := \
\\!\\(\\*FractionBox[\\(1\\), \
\\(2\\)]\\)mass*\\!\\(\\*SuperscriptBox[\\(length\\), \\(2\\)]\\)*\"\>", 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.658045322242022*^9, 3.658580256992736*^9, 
  3.6585822375355864`*^9, 3.658588148209756*^9, 3.65859614783571*^9}]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.657990051510298*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["EXPERIMENTAL", "Subsubsection",
 CellChangeTimes->{{3.6579898707054853`*^9, 3.657989872985265*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "theta", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"L", "=", " ", 
   RowBox[{"Times", "[", 
    RowBox[{
     RowBox[{"Plus", "[", 
      RowBox[{
       RowBox[{"Sin", "[", "theta", "]"}], ",", " ", 
       RowBox[{"Plus", "[", 
        RowBox[{
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"Sin", "[", "theta", "]"}], ",", " ", 
           RowBox[{"Cos", "[", "theta", "]"}]}], "]"}], ",", " ", 
         RowBox[{"Times", "[", 
          RowBox[{
           RowBox[{"Times", "[", 
            RowBox[{
             RowBox[{"Sin", "[", "theta", "]"}], ",", " ", 
             "0.1264012221818857"}], "]"}], ",", " ", 
           RowBox[{"Times", "[", 
            RowBox[{"omega", ",", " ", "omega"}], "]"}]}], "]"}]}], "]"}]}], 
      "]"}], ",", " ", "0.06703977631709543"}], "]"}]}], "\n"}], "\n", 
 RowBox[{"L", " ", "=", " ", 
  RowBox[{"L", "/.", 
   RowBox[{"omega", "\[Rule]", 
    RowBox[{
     RowBox[{"\[Theta]", "'"}], "[", "t", "]"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"L", " ", "=", " ", 
   RowBox[{"L", "/.", 
    RowBox[{"theta", "\[Rule]", 
     RowBox[{"\[Theta]", "[", "t", "]"}]}]}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"ELexp", " ", "=", " ", 
   RowBox[{"EulerEquations", "[", 
    RowBox[{"L", ",", 
     RowBox[{"\[Theta]", "[", "t", "]"}], ",", "t"}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "s", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"s", " ", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"List", "[", "ELexp", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Theta]", "[", "0", "]"}], " ", "\[Equal]", " ", 
        "2.9845130209103"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Theta]", "'"}], "[", "0", "]"}], " ", "\[Equal]", " ", 
        RowBox[{
         RowBox[{"-", "2.71050543121376"}], "*", 
         RowBox[{"10", "^", 
          RowBox[{"-", "20"}]}]}]}]}], "}"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"expsoln", " ", "=", " ", 
   RowBox[{"NDSolve", "[", 
    RowBox[{"s", ",", 
     RowBox[{"\[Theta]", "[", "t", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "30"}], "}"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{
     RowBox[{"\[Theta]", "[", "t", "]"}], "/.", "expsoln"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "30"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", 
    RowBox[{"Experimentally_Derived", " ", 
     RowBox[{"\[Theta]", "[", "t", "]"}]}]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"\[Theta]", "[", "t", "]"}]}], "}"}]}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.657988014726403*^9, 3.657988077165873*^9}, 
   3.6579888705038147`*^9, {3.6579889059296503`*^9, 3.657988923792392*^9}, {
   3.657988958000236*^9, 3.657988958552103*^9}, {3.6579891503046083`*^9, 
   3.657989178040313*^9}, 3.657989211487237*^9, {3.6579892994392757`*^9, 
   3.6579893158467007`*^9}, {3.657989366876622*^9, 3.657989390801928*^9}, {
   3.657989465804738*^9, 3.657989468073797*^9}, {3.657989504312957*^9, 
   3.657989594348893*^9}, {3.657989625498517*^9, 3.657989824061715*^9}, {
   3.657990371817163*^9, 3.657990385403253*^9}, {3.65799041859699*^9, 
   3.657990438362488*^9}, {3.657990475082389*^9, 3.6579905183041773`*^9}, {
   3.657990555436969*^9, 3.65799057448308*^9}, {3.657990628096908*^9, 
   3.65799067387816*^9}, {3.657990743736355*^9, 3.657990764472891*^9}, {
   3.657990876187808*^9, 3.657990891497727*^9}, {3.658039866408675*^9, 
   3.658039866627204*^9}, {3.658040042863014*^9, 3.658040061771626*^9}, {
   3.6580423398602257`*^9, 3.658042355893427*^9}, {3.658045443579937*^9, 
   3.658045451467678*^9}, {3.658046086589493*^9, 3.658046112675123*^9}, {
   3.658144899135075*^9, 3.6581449096343193`*^9}, {3.658144941870049*^9, 
   3.658144987851738*^9}, {3.658145594688113*^9, 3.6581456199209642`*^9}, {
   3.658145652515505*^9, 3.6581457899018583`*^9}, {3.658145839060117*^9, 
   3.65814584314576*^9}, {3.6585837025477552`*^9, 3.6585837293455*^9}, {
   3.658588381475144*^9, 3.6585885320606947`*^9}, {3.658588580507407*^9, 
   3.6585885817265873`*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{"0.06703977631709543`", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"0.1264012221818857`", " ", 
      SuperscriptBox["omega", "2"], " ", 
      RowBox[{"sin", "(", "theta", ")"}]}], "+", 
     RowBox[{"sin", "(", "theta", ")"}], "+", 
     RowBox[{
      RowBox[{"sin", "(", "theta", ")"}], " ", 
      RowBox[{"cos", "(", "theta", ")"}]}]}], ")"}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{
  3.6579908635745173`*^9, {3.658040044423629*^9, 3.6580400633257227`*^9}, 
   3.658045451986416*^9, 3.6580460909120398`*^9, 3.6581449889680433`*^9, 
   3.658145620516015*^9, {3.6581456718751793`*^9, 3.658145725466641*^9}, {
   3.658145757939777*^9, 3.65814579075264*^9}, 3.6581458439610987`*^9, 
   3.658580257088311*^9, 3.658582237568852*^9, 3.6585823767788486`*^9, {
   3.658583729843247*^9, 3.65858374395947*^9}, 3.658588148248015*^9, {
   3.658588465848238*^9, 3.658588479395505*^9}, {3.658588535101674*^9, 
   3.658588561235572*^9}, 3.658596147862979*^9, {3.65864892329935*^9, 
   3.658648927693262*^9}, 3.658648967540716*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"0.06703977631709543`", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"0.1264012221818857`", " ", 
      RowBox[{"sin", "(", "theta", ")"}], " ", 
      SuperscriptBox[
       RowBox[{
        SuperscriptBox["\[Theta]", "\[Prime]",
         MultilineFunction->None], "(", "t", ")"}], "2"]}], "+", 
     RowBox[{"sin", "(", "theta", ")"}], "+", 
     RowBox[{
      RowBox[{"sin", "(", "theta", ")"}], " ", 
      RowBox[{"cos", "(", "theta", ")"}]}]}], ")"}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{
  3.6579908635745173`*^9, {3.658040044423629*^9, 3.6580400633257227`*^9}, 
   3.658045451986416*^9, 3.6580460909120398`*^9, 3.6581449889680433`*^9, 
   3.658145620516015*^9, {3.6581456718751793`*^9, 3.658145725466641*^9}, {
   3.658145757939777*^9, 3.65814579075264*^9}, 3.6581458439610987`*^9, 
   3.658580257088311*^9, 3.658582237568852*^9, 3.6585823767788486`*^9, {
   3.658583729843247*^9, 3.65858374395947*^9}, 3.658588148248015*^9, {
   3.658588465848238*^9, 3.658588479395505*^9}, {3.658588535101674*^9, 
   3.658588561235572*^9}, 3.658596147862979*^9, {3.65864892329935*^9, 
   3.658648927693262*^9}, 3.658648967547666*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"0.06703977631709543`", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"0.1264012221818857`", " ", 
      SuperscriptBox[
       RowBox[{
        SuperscriptBox["\[Theta]", "\[Prime]",
         MultilineFunction->None], "(", "t", ")"}], "2"], " ", 
      RowBox[{"sin", "(", 
       RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], "+", 
     RowBox[{"sin", "(", 
      RowBox[{"\[Theta]", "(", "t", ")"}], ")"}], "+", 
     RowBox[{
      RowBox[{"sin", "(", 
       RowBox[{"\[Theta]", "(", "t", ")"}], ")"}], " ", 
      RowBox[{"cos", "(", 
       RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}]}], ")"}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{
  3.6579908635745173`*^9, {3.658040044423629*^9, 3.6580400633257227`*^9}, 
   3.658045451986416*^9, 3.6580460909120398`*^9, 3.6581449889680433`*^9, 
   3.658145620516015*^9, {3.6581456718751793`*^9, 3.658145725466641*^9}, {
   3.658145757939777*^9, 3.65814579075264*^9}, 3.6581458439610987`*^9, 
   3.658580257088311*^9, 3.658582237568852*^9, 3.6585823767788486`*^9, {
   3.658583729843247*^9, 3.65858374395947*^9}, 3.658588148248015*^9, {
   3.658588465848238*^9, 3.658588479395505*^9}, {3.658588535101674*^9, 
   3.658588561235572*^9}, 3.658596147862979*^9, {3.65864892329935*^9, 
   3.658648927693262*^9}, 3.658648967552548*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     RowBox[{"0.0169478193225622`", " ", 
      RowBox[{
       SuperscriptBox["\[Theta]", "\[Prime]\[Prime]",
        MultilineFunction->None], "(", "t", ")"}], " ", 
      RowBox[{"sin", "(", 
       RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}]}], "-", 
    RowBox[{"0.0084739096612811`", " ", 
     SuperscriptBox[
      RowBox[{
       SuperscriptBox["\[Theta]", "\[Prime]",
        MultilineFunction->None], "(", "t", ")"}], "2"], " ", 
     RowBox[{"cos", "(", 
      RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], "-", 
    RowBox[{"0.06703977631709543`", " ", 
     RowBox[{
      SuperscriptBox["sin", "2"], "(", 
      RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], "+", 
    RowBox[{"0.06703977631709543`", " ", 
     RowBox[{
      SuperscriptBox["cos", "2"], "(", 
      RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], "+", 
    RowBox[{"0.06703977631709543`", " ", 
     RowBox[{"cos", "(", 
      RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}]}], "\[LongEqual]", "0"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{
  3.6579908635745173`*^9, {3.658040044423629*^9, 3.6580400633257227`*^9}, 
   3.658045451986416*^9, 3.6580460909120398`*^9, 3.6581449889680433`*^9, 
   3.658145620516015*^9, {3.6581456718751793`*^9, 3.658145725466641*^9}, {
   3.658145757939777*^9, 3.65814579075264*^9}, 3.6581458439610987`*^9, 
   3.658580257088311*^9, 3.658582237568852*^9, 3.6585823767788486`*^9, {
   3.658583729843247*^9, 3.65858374395947*^9}, 3.658588148248015*^9, {
   3.658588465848238*^9, 3.658588479395505*^9}, {3.658588535101674*^9, 
   3.658588561235572*^9}, 3.658596147862979*^9, {3.65864892329935*^9, 
   3.658648927693262*^9}, 3.658648967579639*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       RowBox[{"0.0169478193225622`", " ", 
        RowBox[{
         SuperscriptBox["\[Theta]", "\[Prime]\[Prime]",
          MultilineFunction->None], "(", "t", ")"}], " ", 
        RowBox[{"sin", "(", 
         RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}]}], "-", 
      RowBox[{"0.0084739096612811`", " ", 
       SuperscriptBox[
        RowBox[{
         SuperscriptBox["\[Theta]", "\[Prime]",
          MultilineFunction->None], "(", "t", ")"}], "2"], " ", 
       RowBox[{"cos", "(", 
        RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], "-", 
      RowBox[{"0.06703977631709543`", " ", 
       RowBox[{
        SuperscriptBox["sin", "2"], "(", 
        RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], "+", 
      RowBox[{"0.06703977631709543`", " ", 
       RowBox[{
        SuperscriptBox["cos", "2"], "(", 
        RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}], "+", 
      RowBox[{"0.06703977631709543`", " ", 
       RowBox[{"cos", "(", 
        RowBox[{"\[Theta]", "(", "t", ")"}], ")"}]}]}], "\[LongEqual]", "0"}],
     ",", 
    RowBox[{
     RowBox[{"\[Theta]", "(", "0", ")"}], "\[LongEqual]", 
     "2.9845130209103`"}], ",", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[Theta]", "\[Prime]",
       MultilineFunction->None], "(", "0", ")"}], "\[LongEqual]", 
     RowBox[{"-", "2.7105054312137602`*^-20"}]}]}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{
  3.6579908635745173`*^9, {3.658040044423629*^9, 3.6580400633257227`*^9}, 
   3.658045451986416*^9, 3.6580460909120398`*^9, 3.6581449889680433`*^9, 
   3.658145620516015*^9, {3.6581456718751793`*^9, 3.658145725466641*^9}, {
   3.658145757939777*^9, 3.65814579075264*^9}, 3.6581458439610987`*^9, 
   3.658580257088311*^9, 3.658582237568852*^9, 3.6585823767788486`*^9, {
   3.658583729843247*^9, 3.65858374395947*^9}, 3.658588148248015*^9, {
   3.658588465848238*^9, 3.658588479395505*^9}, {3.658588535101674*^9, 
   3.658588561235572*^9}, 3.658596147862979*^9, {3.65864892329935*^9, 
   3.658648927693262*^9}, 3.658648967584279*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Theta]", "(", "t", ")"}], "\[Rule]", 
     RowBox[{
      TagBox[
       TemplateBox[{RowBox[{
           StyleBox[
            TagBox["InterpolatingFunction", "SummaryHead"], 
            "NonInterpretableSummary"], 
           StyleBox["[", "NonInterpretableSummary"], 
           DynamicModuleBox[{Typeset`open$$ = False}, 
            PanelBox[
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAA9xwHa8MPoT7sXNpcSOAHQIQ91Tyl
TN8/DBm3LX34BkCt8DvJ0E7wPwbbWptdMwNAdW6N1I46+D8kprFTVov0P1BO
KyeG/v8/N7yiEkgZ4T+3TYwWfjUEQJ25R2sgwABAg2IoYsQjCEBKmJPy0OEF
QPEtbAdKZgxA+Hpen/LCB0A0FSsodkoQQNfWv6tGbQdAj8ry8Mw9EkD+lCfy
+/sEQDtbjmZDWxRAVvDK/SWE+z8Go3yAv1QWQL3IJncPqpU/VgM+7ElEGEB7
gxZFmp/6P/c+0wT0XRpAm4NxjX3HBEC2MbvBo1McQCVxjhKXXQdAxv92K3Nz
HkAuockjfccHQC3zgnOoRCBAchZUfC0JBkAGwnMjmj0hQELEwXDWOAFAiH7O
qZtLIkB+cAqpL7PkP5mWUgKgRyNAVAW7GQVf8z9TnEAxtFgkQHf80K1sYANA
Ty4Yic9kJUANnpDpQAEHQNobGbPtXiZAmz0u5yXgB0AO94OzG24nQNfCD5od
xQZA0S0YhkxrKEBUWkYr5goDQNfwlYGEYylAbqYOvHhf9D+FoX1TzHAqQABf
2FYKbOY/wq2O9xZsK0BxTy3EieEAQKinCXJxfCxACUitg94rBkDQLW4V04ct
QJCu+KNhzgdAiA/8ijeBLkDy05KhJ2sHQOje89arjy9AhrDlvgueBEDshIp6
EUYwQNfRbLo6Lvs/heAPntDBMEA1iQ3xgn6eP/IyyqwXSDFADHds83Q4/D8n
M5kkYMUxQDbbDwVTzQRAMCqdhzBNMkBlhZbpsHoHQAHPtVMCzDJAizH+OgHF
B0DzOUO0V0gzQP62TfwaMgZAuZsFADXPM0BvHM0HOwcBQEer3LQTTTRAKMRQ
Dm5y5z+psehUetU0QNsHHefPSPQ/LH5piWRbNUDHOr5HV3UDQHf4/iZQ2DVA
pu28LRvlBkCWacmvw182QGeSEci63wdAfYiooTjeNkDezCoE+d0GQIVt/Ccx
WjdAQv1iAmdsA0BhSYWZseA3QHxBXmruAPQ/BdMidDNeOEBib9/P4PziP31T
9Tk95jhAz4waY5ERAUAWmjyUyms5QA/DxnuHLgZAd46YV1noOUCfgCJqc8QH
QKx5KQZwbzpA8VRx8FVmB0CpEs8diO06QD0J0wyK3ARAeqKpICh2O0D/oJwA
16z6P234+LdL/DtA5Q605BlTxj8n/Fy4cHk8QOZXr52B5Pw/tfb1ox0BPUA/
FHhMC0IFQAufo/jLfz1AlGpPE9yHB0BKHnj3//89QPM0cvhwuwdAae6gkA==

                    "]]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None}, 
                    PlotRange -> {{0., 30.}, {0., 2.9845130209101765`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"(", "\[NoBreak]", 
                    
                    GridBox[{{"0.`", "30.`"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAA9xwHa8MPoT7sXNpcSOAHQIQ91Tyl
TN8/DBm3LX34BkCt8DvJ0E7wPwbbWptdMwNAdW6N1I46+D8kprFTVov0P1BO
KyeG/v8/N7yiEkgZ4T+3TYwWfjUEQJ25R2sgwABAg2IoYsQjCEBKmJPy0OEF
QPEtbAdKZgxA+Hpen/LCB0A0FSsodkoQQNfWv6tGbQdAj8ry8Mw9EkD+lCfy
+/sEQDtbjmZDWxRAVvDK/SWE+z8Go3yAv1QWQL3IJncPqpU/VgM+7ElEGEB7
gxZFmp/6P/c+0wT0XRpAm4NxjX3HBEC2MbvBo1McQCVxjhKXXQdAxv92K3Nz
HkAuockjfccHQC3zgnOoRCBAchZUfC0JBkAGwnMjmj0hQELEwXDWOAFAiH7O
qZtLIkB+cAqpL7PkP5mWUgKgRyNAVAW7GQVf8z9TnEAxtFgkQHf80K1sYANA
Ty4Yic9kJUANnpDpQAEHQNobGbPtXiZAmz0u5yXgB0AO94OzG24nQNfCD5od
xQZA0S0YhkxrKEBUWkYr5goDQNfwlYGEYylAbqYOvHhf9D+FoX1TzHAqQABf
2FYKbOY/wq2O9xZsK0BxTy3EieEAQKinCXJxfCxACUitg94rBkDQLW4V04ct
QJCu+KNhzgdAiA/8ijeBLkDy05KhJ2sHQOje89arjy9AhrDlvgueBEDshIp6
EUYwQNfRbLo6Lvs/heAPntDBMEA1iQ3xgn6eP/IyyqwXSDFADHds83Q4/D8n
M5kkYMUxQDbbDwVTzQRAMCqdhzBNMkBlhZbpsHoHQAHPtVMCzDJAizH+OgHF
B0DzOUO0V0gzQP62TfwaMgZAuZsFADXPM0BvHM0HOwcBQEer3LQTTTRAKMRQ
Dm5y5z+psehUetU0QNsHHefPSPQ/LH5piWRbNUDHOr5HV3UDQHf4/iZQ2DVA
pu28LRvlBkCWacmvw182QGeSEci63wdAfYiooTjeNkDezCoE+d0GQIVt/Ccx
WjdAQv1iAmdsA0BhSYWZseA3QHxBXmruAPQ/BdMidDNeOEBib9/P4PziP31T
9Tk95jhAz4waY5ERAUAWmjyUyms5QA/DxnuHLgZAd46YV1noOUCfgCJqc8QH
QKx5KQZwbzpA8VRx8FVmB0CpEs8diO06QD0J0wyK3ARAeqKpICh2O0D/oJwA
16z6P234+LdL/DtA5Q605BlTxj8n/Fy4cHk8QOZXr52B5Pw/tfb1ox0BPUA/
FHhMC0IFQAufo/jLfz1AlGpPE9yHB0BKHnj3//89QPM0cvhwuwdAae6gkA==

                    "]]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None}, 
                    PlotRange -> {{0., 30.}, {0., 2.9845130209101765`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"(", "\[NoBreak]", 
                    
                    GridBox[{{"0.`", "30.`"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic], 
             BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
           StyleBox["]", "NonInterpretableSummary"]}]},
        "CopyTag",
        DisplayFunction->(#& ),
        InterpretationFunction->("InterpolatingFunction[{{0., 30.}}, <>]"& )],
       
       False,
       Editable->False,
       SelectWithContents->True,
       Selectable->False], "\[InvisibleApplication]", 
      RowBox[{"(", "t", ")"}]}]}], "}"}], "}"}], TraditionalForm]], "Output",
 CellChangeTimes->{
  3.6579908635745173`*^9, {3.658040044423629*^9, 3.6580400633257227`*^9}, 
   3.658045451986416*^9, 3.6580460909120398`*^9, 3.6581449889680433`*^9, 
   3.658145620516015*^9, {3.6581456718751793`*^9, 3.658145725466641*^9}, {
   3.658145757939777*^9, 3.65814579075264*^9}, 3.6581458439610987`*^9, 
   3.658580257088311*^9, 3.658582237568852*^9, 3.6585823767788486`*^9, {
   3.658583729843247*^9, 3.65858374395947*^9}, 3.658588148248015*^9, {
   3.658588465848238*^9, 3.658588479395505*^9}, {3.658588535101674*^9, 
   3.658588561235572*^9}, 3.658596147862979*^9, {3.65864892329935*^9, 
   3.658648927693262*^9}, 3.6586489676304893`*^9}],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
sy5MTDwk4+fZRTlPnL/ntHRUvBPIUF51LNQG53Mfl3tBW0lk2DPaP8KK8/za
ve8td1PI0Ldse+g5rgPfSXGyPiPDytaz3C1cUw1ddX72nAyn66k5pXF/EE5s
KJR+gfcvMyVcHNf0iqxbbzPJ4O3ksLuIX//Q5rQhyiaDcDrciME1163C+NZc
MlR0W29t4M9/mr390zof78fJx7c1cC3aYSI/WkiGg2nD9IfxeHPWk69dKCID
S0HFUyE8HwWRqYa1t2TgzndVbhvAoNhYnSW0lAwzrllNRng9NH1CHRk/kCEj
K90xAa9XVUpn7uMKMsicyl0qwut5qF5oVbyaDNsv6EJS8XofY6+M1a4nQ01Z
0o0p3A90HaT70dRIBjmhs98O4/2zdbOVOt5MhjZqUwZvvL/Opf9qzn0hg+2n
3tH9+DxMDx+i//eVDPGcdE7///+Oi1ic7a0uMvB9+XddtxKDa7YKfxP6yPDc
rlQm9B3ux4IDdEQG8PliPn7XAZ/H0NyWyPxBMjgdb2Ei5mMQu+kmWj+Kz9N1
dcZ6nP/ZxN55mU3g89I6Jdv/DPcjR6kqvv8iw6rjpfoK3E9nPE09sThLhkaV
9tA/uN+Wbpx7HjBPBpMDv+S1cT9e+EdrjvSXDEzReydsQjAo0+0LE1glQ86H
7PHlqxi0jzCVmlCowsqmxME6e1xL277Jo1KFo1r0Jxdx/v/qnZZHR1SFTRG/
/gWc/zsoVJ630qrCxzfONmd08XoJH48wYVOF4pR4YSohXJ9LCcnjUIXz7exc
rzkx6H4zFkjHrQpXIl3KZRhxfwdXLrfyq0JAf0D7nW0S9J1+ZG8iqQrKgVUB
zb0k6M8ZtMqTVgXfz++PdrXhelHcnE5OFbL+8X/NrMP5PrjkcKuSKrC8uMKU
XkCCwbReeZMDqqBrKSYxGkyCkRHuPWNTVXARm3Gu58O19JmNXDNVuEYynV1l
IMGod+4yrSV+/TKryuQeEcYotKZbrFVBunz2/Z8xIkwIn+w0dlKFTmJ7z/0s
XJ/L+Jx7RhXKDR49uJFAhMk3s420rqoQca+fgusOEX5BYHnLOVVoCJdgPe1C
hJnTzzKMfVShdO/mUSZ+IvzOmXyW66sKX8+7SLrS4npRIZnWXxXsGxfMTq8S
YC64OrolQBVaoHnB6CsB5tN+XjW+owp+9yVF3gbifmBExMg4WRXO2vyOTsbP
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
/w8+rPFG
      "]]}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{
     FormBox["t", TraditionalForm], 
     FormBox[
      RowBox[{"\[Theta]", "(", "t", ")"}], TraditionalForm]},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotLabel->FormBox[
     RowBox[{"Experimentally_Derived", " ", 
       RowBox[{"\[Theta]", "(", "t", ")"}]}], TraditionalForm],
   PlotRange->{All, All},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{
  3.6579908635745173`*^9, {3.658040044423629*^9, 3.6580400633257227`*^9}, 
   3.658045451986416*^9, 3.6580460909120398`*^9, 3.6581449889680433`*^9, 
   3.658145620516015*^9, {3.6581456718751793`*^9, 3.658145725466641*^9}, {
   3.658145757939777*^9, 3.65814579075264*^9}, 3.6581458439610987`*^9, 
   3.658580257088311*^9, 3.658582237568852*^9, 3.6585823767788486`*^9, {
   3.658583729843247*^9, 3.65858374395947*^9}, 3.658588148248015*^9, {
   3.658588465848238*^9, 3.658588479395505*^9}, {3.658588535101674*^9, 
   3.658588561235572*^9}, 3.658596147862979*^9, {3.65864892329935*^9, 
   3.658648927693262*^9}, 3.6586489676853952`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{
       RowBox[{"\[Theta]", "[", "t", "]"}], "/.", "expsoln"}], "]"}], ",", 
     " ", 
     RowBox[{"Evaluate", "[", 
      RowBox[{
       RowBox[{"\[Theta]", "[", "t", "]"}], "/.", "theorysoln"}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "30"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", 
    RowBox[{"Experimentally_Derived", " ", 
     RowBox[{"\[Theta]", "[", "t", "]"}]}]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"\[Theta]", "[", "t", "]"}]}], "}"}]}]}], "]"}]], "Code",
 CellChangeTimes->{3.6585885863917913`*^9}],

Cell[BoxData[
 FormBox[
  GraphicsBox[{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
sy5MTDwk4+fZRTlPnL/ntHRUvBPIUF51LNQG53Mfl3tBW0lk2DPaP8KK8/za
ve8td1PI0Ldse+g5rgPfSXGyPiPDytaz3C1cUw1ddX72nAyn66k5pXF/EE5s
KJR+gfcvMyVcHNf0iqxbbzPJ4O3ksLuIX//Q5rQhyiaDcDrciME1163C+NZc
MlR0W29t4M9/mr390zof78fJx7c1cC3aYSI/WkiGg2nD9IfxeHPWk69dKCID
S0HFUyE8HwWRqYa1t2TgzndVbhvAoNhYnSW0lAwzrllNRng9NH1CHRk/kCEj
K90xAa9XVUpn7uMKMsicyl0qwut5qF5oVbyaDNsv6EJS8XofY6+M1a4nQ01Z
0o0p3A90HaT70dRIBjmhs98O4/2zdbOVOt5MhjZqUwZvvL/Opf9qzn0hg+2n
3tH9+DxMDx+i//eVDPGcdE7///+Oi1ic7a0uMvB9+XddtxKDa7YKfxP6yPDc
rlQm9B3ux4IDdEQG8PliPn7XAZ/H0NyWyPxBMjgdb2Ei5mMQu+kmWj+Kz9N1
dcZ6nP/ZxN55mU3g89I6Jdv/DPcjR6kqvv8iw6rjpfoK3E9nPE09sThLhkaV
9tA/uN+Wbpx7HjBPBpMDv+S1cT9e+EdrjvSXDEzReydsQjAo0+0LE1glQ86H
7PHlqxi0jzCVmlCowsqmxME6e1xL277Jo1KFo1r0Jxdx/v/qnZZHR1SFTRG/
/gWc/zsoVJ630qrCxzfONmd08XoJH48wYVOF4pR4YSohXJ9LCcnjUIXz7exc
rzkx6H4zFkjHrQpXIl3KZRhxfwdXLrfyq0JAf0D7nW0S9J1+ZG8iqQrKgVUB
zb0k6M8ZtMqTVgXfz++PdrXhelHcnE5OFbL+8X/NrMP5PrjkcKuSKrC8uMKU
XkCCwbReeZMDqqBrKSYxGkyCkRHuPWNTVXARm3Gu58O19JmNXDNVuEYynV1l
IMGod+4yrSV+/TKryuQeEcYotKZbrFVBunz2/Z8xIkwIn+w0dlKFTmJ7z/0s
XJ/L+Jx7RhXKDR49uJFAhMk3s420rqoQca+fgusOEX5BYHnLOVVoCJdgPe1C
hJnTzzKMfVShdO/mUSZ+IvzOmXyW66sKX8+7SLrS4npRIZnWXxXsGxfMTq8S
YC64OrolQBVaoHnB6CsB5tN+XjW+owp+9yVF3gbifmBExMg4WRXO2vyOTsbP
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
/w8+rPFG
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
ArXLwsdOj7Agop5bV475sNkBgzf9Yzj+a4naAsyXu1sPhJz/h+vFe/7DeicK
2MqaOA2Ks8FrexlNGvPty4L3Wo6SbFhZwtw+sZICEn5RQ1lSbIjrePX05moK
eGVYvBol2EA/3X5bH/n5sKrlwnIZNly3sSnxwHxfbSwuMFuWDcZHFqx3Qv6G
LGDaT8mxYcLNkz2FftHk9kVjlSIbBvOd+/yQ34y4xN/5SmzYsV+Rexr5nnyX
+0JChQ26G+ObDiH/+zs7MtznsmH11Q1pC9APnGYn+xeqscFKXtE9Ect5iy0X
S89jg9aCf1Ki/aBE0I+5GzTZwIvddOYoln0up/4q1sb6mHmq6mP5aYN1hYwe
G6KOD2Tsw/NrT+tL22jABoung1bJeP0DtAy/+wvYsFhWQ7gZ69fibWclb8IG
9anOV3+w/rwTf5S3mrGhiXKSZ4XtSy+/8KPMgg0DsgrfHLH9Q30Oj5TobHBZ
P2CigvFxnT9y0pfJht9lLomZGL+bzpe3PWGzYcPr5zHdGN8Qp7JBBx4b/j6e
CLmxHH3AselQo4ANnw/LzjHG/pnu0CfnuZANkS57F663p0C1PXGuy4oNOUtu
tdguxngt0TLaYyOK98ivLvRLdzve3XFbNlSrU2JtBBTotPGrm+nIhtf9D76Y
oJ9eWxS9Id2ZDSGJC9VK0S8CrM//1HJhw66aBy9I9AsxqJ3OXM2G2jdTqp2q
FFDlM3hrvdhQYPA1+PU/Etq4Ti/aN7LhYBo/U/R+iWyOj+uuLWzMC32l/qB/
M1jpuw7uYEPA6cFhR/T1ZdSJrOxANlSU39dqeURClMFTmb9xGH+TXeIQTMJS
/db0fUfZsMxS8VaqHwkKekN60sfY8GqplPjHjSSc1zYE1ZNs+Coeo8RaRsJ9
jYRAOIfjYd9d2TADEn7Ncm1NuMmGyk/lX9e/J6BYceeO2cVsiJ5tmXqrhoBw
hZjhC3fw8w6eNWq43hBy9xSKHrBhUrqEw7xFgA5F3fbDMzaIO/YeeppIwA+C
2bDxJRtiy+xkpqIIKJR29uqpYsM+5ffcDREEWE6PDPv3BsdblszoGV/kv1h7
gV4ztu+kY7GlIwFn5g13H25hIweK5m1cTECLgKL39RMb5C9zq4stCfAMtcg4
/40Np4rlT/fi+pyZtqhpooMNU3KSe5pw/f56e7XC2i427Hz2XOwv5oc+vyNi
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
CaH2UtGOxciL/wHvAMlO
      "]]}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{
     FormBox["t", TraditionalForm], 
     FormBox[
      RowBox[{"\[Theta]", "(", "t", ")"}], TraditionalForm]},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotLabel->FormBox[
     RowBox[{"Experimentally_Derived", " ", 
       RowBox[{"\[Theta]", "(", "t", ")"}]}], TraditionalForm],
   PlotRange->{All, All},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586489372591963`*^9, 3.658648970118639*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Double Pendulum ", "Section",
 CellChangeTimes->{{3.657907401193247*^9, 3.6579074057371798`*^9}}],

Cell[CellGroupData[{

Cell["Theoretical Lagrangian", "Subsection",
 CellChangeTimes->{{3.6585957730455*^9, 3.658595787716982*^9}}],

Cell["\<\
Theoretical analytical double pendulum lagrangian is of the form:\
\>", "Text",
 CellChangeTimes->{{3.658652338250657*^9, 3.6586523569377728`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"L", " ", "=", " ", 
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], " ", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["m", "1"], "+", 
       SubscriptBox["m", "2"]}], ")"}], 
     SuperscriptBox[
      RowBox[{
       SuperscriptBox[
        SubscriptBox["l", "1"], "2"], "(", 
       FractionBox[
        SubscriptBox["d\[Theta]", "1"], "dt"], ")"}], "2"]}], "+", 
    RowBox[{
     FractionBox["1", "2"], 
     SubscriptBox["m", "2"], 
     SuperscriptBox[
      RowBox[{
       SuperscriptBox[
        SubscriptBox["l", "2"], "2"], "(", 
       FractionBox[
        SubscriptBox["d\[Theta]", "2"], "dt"], ")"}], "2"]}], "+", 
    RowBox[{
     SubscriptBox["m", "2"], 
     SubscriptBox["l", "1"], 
     RowBox[{
      SubscriptBox["l", "2"], "(", 
      FractionBox[
       SubscriptBox["d\[Theta]", "1"], "dt"], ")"}], 
     RowBox[{"(", 
      FractionBox[
       SubscriptBox["d\[Theta]", "2"], "dt"], ")"}], 
     RowBox[{"cos", "(", 
      RowBox[{
       SubscriptBox["\[Theta]", "1"], "-", 
       SubscriptBox["\[Theta]", "2"]}], ")"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["m", "1"], "+", 
       SubscriptBox["m", "2"]}], ")"}], 
     SubscriptBox["gl", "1"], 
     RowBox[{"cos", "(", 
      SubscriptBox["\[Theta]", "1"], ")"}]}], "+", 
    RowBox[{
     SubscriptBox["m", "2"], 
     SubscriptBox["gl", "2"], 
     RowBox[{"cos", "(", 
      SubscriptBox["\[Theta]", "2"], ")"}]}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.658652504435545*^9, 3.6586525064979563`*^9}, {
  3.658652543312104*^9, 3.658652552473349*^9}, {3.658652590895052*^9, 
  3.6586528274141207`*^9}, {3.6586528846625357`*^9, 3.658653157782587*^9}},
 TextAlignment->Center],

Cell[CellGroupData[{

Cell[BoxData[{"\"\<Parameters:\>\"", "\n", 
 RowBox[{
  RowBox[{
   SubscriptBox["m", "1"], " ", "=", " ", "1"}], " "}], "\n", 
 RowBox[{
  SubscriptBox["l", "1"], " ", "=", " ", "1"}], "\n", 
 RowBox[{
  SubscriptBox["m", "2"], " ", "=", " ", "1"}], "\n", 
 RowBox[{
  SubscriptBox["l", "2"], " ", "=", " ", "1"}], "\n", 
 RowBox[{
  RowBox[{"g", " ", "=", " ", "9.8"}], "\n"}], "\n", 
 RowBox[{"Clear", "[", "theorylag", "]"}], "\n", 
 RowBox[{"Clear", "[", "theoryEL", "]"}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "theorysol", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"theorylag", " ", "=", " ", 
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{"(", 
      RowBox[{"m1", "+", "m2"}], ")"}], 
     RowBox[{"l1", "^", "2"}], "*", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SubscriptBox["\[Theta]", "1"], "'"}], "[", "t", "]"}], ")"}], "^", 
      "2"}]}], "+", 
    RowBox[{
     FractionBox["1", "2"], "m1", "*", 
     RowBox[{"l2", "^", "2"}], "*", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SubscriptBox["\[Theta]", "2"], "'"}], "[", "t", "]"}], ")"}], "^", 
      "2"}]}], "+", 
    RowBox[{"m2", "*", "l1", "*", "l2", "*", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Theta]", "1"], "'"}], "[", "t", "]"}], ")"}], "*", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Theta]", "2"], "'"}], "[", "t", "]"}], ")"}], "cos", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Theta]", "1"], "[", "t", "]"}], "-", 
       RowBox[{
        SubscriptBox["\[Theta]", "2"], "[", "t", "]"}]}], ")"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"m1", "+", "m2"}], ")"}], "gr", "*", 
     SubscriptBox["l", "1"], "*", "cos", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["\[Theta]", "1"], "[", "t", "]"}], ")"}]}], "+", 
    RowBox[{"m2", "*", "gr", "*", "l2", "*", "cos", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["\[Theta]", "2"], "[", "t", "]"}], ")"}]}]}]}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"theoryEL", " ", "=", " ", 
   RowBox[{"EulerEquations", "[", 
    RowBox[{"theorylag", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Theta]", "1"], "[", "t", "]"}], ",", 
       RowBox[{
        SubscriptBox["\[Theta]", "2"], "[", "t", "]"}]}], "}"}], ",", "t"}], 
    "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"theorysol", " ", "=", " ", 
   RowBox[{"Solve", "[", 
    RowBox[{"theoryEL", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         SubscriptBox["\[Theta]", "1"], "''"}], "[", "t", "]"}], ",", 
       RowBox[{
        RowBox[{
         SubscriptBox["\[Theta]", "2"], "''"}], "[", "t", "]"}]}], "}"}]}], 
    "]"}]}], "\n", "\n", "\n"}], "\n", 
 RowBox[{"Clear", "[", "theorylagn", "]"}], "\n", 
 RowBox[{"Clear", "[", "ELth", "]"}], "\n", 
 RowBox[{"Clear", "[", "s", "]"}], "\n", 
 RowBox[{
  RowBox[{"Clear", "[", "theorysoln", "]"}], "\n"}], "\n", 
 RowBox[{"theorylagn", " ", "=", " ", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["m", "1"], "+", 
      SubscriptBox["m", "2"]}], ")"}], 
    RowBox[{"l1", "^", "2"}], "*", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Theta]", "1"], "'"}], "[", "t", "]"}], ")"}], "^", 
     "2"}]}], "+", 
   RowBox[{
    FractionBox["1", "2"], 
    SubscriptBox["m", "2"], "*", 
    RowBox[{
     SubscriptBox["l", "2"], "^", "2"}], "*", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Theta]", "2"], "'"}], "[", "t", "]"}], ")"}], "^", 
     "2"}]}], "+", 
   RowBox[{
    SubscriptBox["m", "2"], "*", 
    SubscriptBox["l", "1"], "*", 
    SubscriptBox["l", "2"], "*", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[Theta]", "1"], "'"}], "[", "t", "]"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[Theta]", "2"], "'"}], "[", "t", "]"}], ")"}], "cos", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[Theta]", "1"], "[", "t", "]"}], "-", 
      RowBox[{
       SubscriptBox["\[Theta]", "2"], "[", "t", "]"}]}], ")"}]}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["m", "1"], "+", 
      SubscriptBox["m", "2"]}], ")"}], "g", "*", 
    SubscriptBox["l", "1"], "*", "cos", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[Theta]", "1"], "[", "t", "]"}], ")"}]}], "+", 
   RowBox[{
    SubscriptBox["m", "2"], "*", "g", "*", 
    SubscriptBox["l", "2"], "*", "cos", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[Theta]", "2"], "[", "t", "]"}], ")"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"ELth", " ", "=", " ", 
   RowBox[{"EulerEquations", "[", 
    RowBox[{"theorylagn", ",", 
     RowBox[{"\[Theta]", "[", "t", "]"}], ",", "t"}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"s", " ", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"List", "[", "ELth", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Theta]", "[", "0", "]"}], " ", "\[Equal]", " ", 
        "2.9845130209103"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"\[Theta]", "'"}], "[", "0", "]"}], " ", "\[Equal]", " ", 
        RowBox[{
         RowBox[{"-", "2.71050543121376"}], "*", 
         RowBox[{"10", "^", 
          RowBox[{"-", "20"}]}]}]}]}], "}"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"theorysoln", " ", "=", " ", 
   RowBox[{"NDSolve", "[", 
    RowBox[{"s", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SubscriptBox["\[Theta]", "1"], "[", "t", "]"}], ",", 
       RowBox[{
        SubscriptBox["\[Theta]", "2"], "[", "t", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "30"}], "}"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{
      RowBox[{"\[Theta]", "[", "t", "]"}], "/.", "theorysoln"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "30"}], "}"}], ",", 
    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
    RowBox[{"PlotLabel", "\[Rule]", 
     RowBox[{"Theoretical", " ", 
      RowBox[{"\[Theta]", "[", "t", "]"}]}]}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"\[Theta]", "[", "t", "]"}]}], "}"}]}]}], "]"}], 
  "\n"}], "\n"}], "Code",
 CellChangeTimes->{{3.6586532453933077`*^9, 3.658653840549975*^9}, {
  3.658653890555202*^9, 3.658654032644416*^9}, {3.6586541830734453`*^9, 
  3.658654207166041*^9}, {3.6586542392703333`*^9, 3.6586543272992992`*^9}, {
  3.658654359869563*^9, 3.6586544360469913`*^9}}],

Cell[BoxData[
 FormBox["\<\"Parameters:\"\>", TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436679886*^9}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.65865443668428*^9}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436688073*^9}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436691927*^9}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436695674*^9}],

Cell[BoxData[
 FormBox["9.8`", TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436699548*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"2", " ", "gr", " ", "cos", " ", 
    RowBox[{
     SubscriptBox["\[Theta]", "1"], "(", "t", ")"}]}], "+", 
   RowBox[{"gr", " ", "cos", " ", 
    RowBox[{
     SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], "+", 
   SuperscriptBox[
    RowBox[{
     SuperscriptBox[
      SubscriptBox["\[Theta]", "1"], "\[Prime]",
      MultilineFunction->None], "(", "t", ")"}], "2"], "+", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox[
       SubscriptBox["\[Theta]", "2"], "\[Prime]",
       MultilineFunction->None], "(", "t", ")"}], "2"]}], "+", 
   RowBox[{"cos", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[Theta]", "1"], "(", "t", ")"}], "-", 
      RowBox[{
       SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], ")"}], " ", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["\[Theta]", "2"], "\[Prime]",
      MultilineFunction->None], "(", "t", ")"}], " ", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["\[Theta]", "1"], "\[Prime]",
      MultilineFunction->None], "(", "t", ")"}]}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436703609*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"cos", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "gr"}], "-", 
         RowBox[{
          RowBox[{
           SubscriptBox["\[Theta]", "1"], "(", "t", ")"}], " ", 
          RowBox[{
           SuperscriptBox[
            SubscriptBox["\[Theta]", "2"], "\[Prime]\[Prime]",
            MultilineFunction->None], "(", "t", ")"}]}], "+", 
         RowBox[{
          RowBox[{
           SubscriptBox["\[Theta]", "2"], "(", "t", ")"}], " ", 
          RowBox[{
           SuperscriptBox[
            SubscriptBox["\[Theta]", "2"], "\[Prime]\[Prime]",
            MultilineFunction->None], "(", "t", ")"}]}]}], ")"}]}], "+", 
      RowBox[{"cos", " ", 
       SuperscriptBox[
        RowBox[{
         SuperscriptBox[
          SubscriptBox["\[Theta]", "2"], "\[Prime]",
          MultilineFunction->None], "(", "t", ")"}], "2"]}], "-", 
      RowBox[{"2", " ", 
       RowBox[{
        SuperscriptBox[
         SubscriptBox["\[Theta]", "1"], "\[Prime]\[Prime]",
         MultilineFunction->None], "(", "t", ")"}]}]}], "\[LongEqual]", "0"}],
     ",", 
    RowBox[{
     RowBox[{
      RowBox[{"gr", " ", "cos"}], "-", 
      RowBox[{"cos", " ", 
       SuperscriptBox[
        RowBox[{
         SuperscriptBox[
          SubscriptBox["\[Theta]", "1"], "\[Prime]",
          MultilineFunction->None], "(", "t", ")"}], "2"]}], "-", 
      RowBox[{
       SuperscriptBox[
        SubscriptBox["\[Theta]", "2"], "\[Prime]\[Prime]",
        MultilineFunction->None], "(", "t", ")"}], "-", 
      RowBox[{"cos", " ", 
       RowBox[{
        SubscriptBox["\[Theta]", "1"], "(", "t", ")"}], " ", 
       RowBox[{
        SuperscriptBox[
         SubscriptBox["\[Theta]", "1"], "\[Prime]\[Prime]",
         MultilineFunction->None], "(", "t", ")"}]}], "+", 
      RowBox[{"cos", " ", 
       RowBox[{
        SubscriptBox["\[Theta]", "2"], "(", "t", ")"}], " ", 
       RowBox[{
        SuperscriptBox[
         SubscriptBox["\[Theta]", "1"], "\[Prime]\[Prime]",
         MultilineFunction->None], "(", "t", ")"}]}]}], "\[LongEqual]", 
     "0"}]}], "}"}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436736418*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox[
        SubscriptBox["\[Theta]", "1"], "\[Prime]\[Prime]",
        MultilineFunction->None], "(", "t", ")"}], "\[Rule]", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{
         RowBox[{"-", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"cos", " ", 
              RowBox[{
               SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], "-", 
             RowBox[{"cos", " ", 
              RowBox[{
               SubscriptBox["\[Theta]", "1"], "(", "t", ")"}]}]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"gr", " ", "cos"}], "-", 
             RowBox[{"cos", " ", 
              SuperscriptBox[
               RowBox[{
                SuperscriptBox[
                 SubscriptBox["\[Theta]", "1"], "\[Prime]",
                 MultilineFunction->None], "(", "t", ")"}], "2"]}]}], 
            ")"}]}]}], "-", 
         RowBox[{"2", " ", "gr", " ", "cos"}], "-", 
         RowBox[{"cos", " ", 
          SuperscriptBox[
           RowBox[{
            SuperscriptBox[
             SubscriptBox["\[Theta]", "2"], "\[Prime]",
             MultilineFunction->None], "(", "t", ")"}], "2"]}]}], 
        RowBox[{"2", "-", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"cos", " ", 
             RowBox[{
              SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], "-", 
            RowBox[{"cos", " ", 
             RowBox[{
              SubscriptBox["\[Theta]", "1"], "(", "t", ")"}]}]}], ")"}], 
          "2"]}]]}]}], ",", 
     RowBox[{
      RowBox[{
       SuperscriptBox[
        SubscriptBox["\[Theta]", "2"], "\[Prime]\[Prime]",
        MultilineFunction->None], "(", "t", ")"}], "\[Rule]", 
      RowBox[{"-", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"2", " ", "gr", " ", 
             SuperscriptBox["cos", "2"], " ", 
             RowBox[{
              SubscriptBox["\[Theta]", "1"], "(", "t", ")"}]}]}], "+", 
           RowBox[{"2", " ", "gr", " ", 
            SuperscriptBox["cos", "2"], " ", 
            RowBox[{
             SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], "+", 
           RowBox[{"2", " ", "gr", " ", "cos"}], "+", 
           RowBox[{
            SuperscriptBox["cos", "2"], " ", 
            RowBox[{"(", 
             RowBox[{"-", 
              RowBox[{
               SubscriptBox["\[Theta]", "1"], "(", "t", ")"}]}], ")"}], " ", 
            SuperscriptBox[
             RowBox[{
              SuperscriptBox[
               SubscriptBox["\[Theta]", "2"], "\[Prime]",
               MultilineFunction->None], "(", "t", ")"}], "2"]}], "+", 
           RowBox[{
            SuperscriptBox["cos", "2"], " ", 
            RowBox[{
             SubscriptBox["\[Theta]", "2"], "(", "t", ")"}], " ", 
            SuperscriptBox[
             RowBox[{
              SuperscriptBox[
               SubscriptBox["\[Theta]", "2"], "\[Prime]",
               MultilineFunction->None], "(", "t", ")"}], "2"]}], "-", 
           RowBox[{"2", " ", "cos", " ", 
            SuperscriptBox[
             RowBox[{
              SuperscriptBox[
               SubscriptBox["\[Theta]", "1"], "\[Prime]",
               MultilineFunction->None], "(", "t", ")"}], "2"]}]}], ")"}], 
         "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            SuperscriptBox["cos", "2"], " ", 
            SuperscriptBox[
             RowBox[{
              SubscriptBox["\[Theta]", "1"], "(", "t", ")"}], "2"]}], "+", 
           RowBox[{
            SuperscriptBox["cos", "2"], " ", 
            SuperscriptBox[
             RowBox[{
              SubscriptBox["\[Theta]", "2"], "(", "t", ")"}], "2"]}], "-", 
           RowBox[{"2", " ", 
            SuperscriptBox["cos", "2"], " ", 
            RowBox[{
             SubscriptBox["\[Theta]", "1"], "(", "t", ")"}], " ", 
            RowBox[{
             SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], "-", "2"}], 
          ")"}]}], ")"}]}]}]}], "}"}], "}"}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436754302*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{
     SuperscriptBox[
      SubscriptBox["\[Theta]", "1"], "\[Prime]",
      MultilineFunction->None], "(", "t", ")"}], "2"], "+", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox[
       SubscriptBox["\[Theta]", "2"], "\[Prime]",
       MultilineFunction->None], "(", "t", ")"}], "2"]}], "+", 
   RowBox[{"cos", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[Theta]", "1"], "(", "t", ")"}], "-", 
      RowBox[{
       SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], ")"}], " ", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["\[Theta]", "2"], "\[Prime]",
      MultilineFunction->None], "(", "t", ")"}], " ", 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["\[Theta]", "1"], "\[Prime]",
      MultilineFunction->None], "(", "t", ")"}]}], "+", 
   RowBox[{"19.6`", " ", "cos", " ", 
    RowBox[{
     SubscriptBox["\[Theta]", "1"], "(", "t", ")"}]}], "+", 
   RowBox[{"9.8`", " ", "cos", " ", 
    RowBox[{
     SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436786356*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"EulerEquations", "::", "args"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"EulerEquations takes a single integrand, a function or \
list of functions, and a list of variables as input. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:VariationalMethods/ref/EulerEquations\\\", ButtonNote \
-> \\\"VariationalMethods`EulerEquations::args\\\"]\\)\"\>"}], 
  TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.658654436889645*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"EulerEquations", "(", 
   RowBox[{
    RowBox[{
     SuperscriptBox[
      RowBox[{
       SuperscriptBox[
        SubscriptBox["\[Theta]", "1"], "\[Prime]",
        MultilineFunction->None], "(", "t", ")"}], "2"], "+", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      SuperscriptBox[
       RowBox[{
        SuperscriptBox[
         SubscriptBox["\[Theta]", "2"], "\[Prime]",
         MultilineFunction->None], "(", "t", ")"}], "2"]}], "+", 
     RowBox[{"cos", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SubscriptBox["\[Theta]", "1"], "(", "t", ")"}], "-", 
        RowBox[{
         SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], ")"}], " ", 
      RowBox[{
       SuperscriptBox[
        SubscriptBox["\[Theta]", "2"], "\[Prime]",
        MultilineFunction->None], "(", "t", ")"}], " ", 
      RowBox[{
       SuperscriptBox[
        SubscriptBox["\[Theta]", "1"], "\[Prime]",
        MultilineFunction->None], "(", "t", ")"}]}], "+", 
     RowBox[{"19.6`", " ", "cos", " ", 
      RowBox[{
       SubscriptBox["\[Theta]", "1"], "(", "t", ")"}]}], "+", 
     RowBox[{"9.8`", " ", "cos", " ", 
      RowBox[{
       SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}]}], ",", 
    RowBox[{"\[Theta]", "(", "t", ")"}], ",", "t"}], ")"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436905445*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"EulerEquations", "(", 
     RowBox[{
      RowBox[{
       SuperscriptBox[
        RowBox[{
         SuperscriptBox[
          SubscriptBox["\[Theta]", "1"], "\[Prime]",
          MultilineFunction->None], "(", "t", ")"}], "2"], "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SuperscriptBox[
         RowBox[{
          SuperscriptBox[
           SubscriptBox["\[Theta]", "2"], "\[Prime]",
           MultilineFunction->None], "(", "t", ")"}], "2"]}], "+", 
       RowBox[{"cos", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           SubscriptBox["\[Theta]", "1"], "(", "t", ")"}], "-", 
          RowBox[{
           SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], ")"}], " ", 
        RowBox[{
         SuperscriptBox[
          SubscriptBox["\[Theta]", "2"], "\[Prime]",
          MultilineFunction->None], "(", "t", ")"}], " ", 
        RowBox[{
         SuperscriptBox[
          SubscriptBox["\[Theta]", "1"], "\[Prime]",
          MultilineFunction->None], "(", "t", ")"}]}], "+", 
       RowBox[{"19.6`", " ", "cos", " ", 
        RowBox[{
         SubscriptBox["\[Theta]", "1"], "(", "t", ")"}]}], "+", 
       RowBox[{"9.8`", " ", "cos", " ", 
        RowBox[{
         SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}]}], ",", 
      RowBox[{"\[Theta]", "(", "t", ")"}], ",", "t"}], ")"}], ",", 
    RowBox[{
     RowBox[{"\[Theta]", "(", "0", ")"}], "\[LongEqual]", 
     "2.9845130209103`"}], ",", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[Theta]", "\[Prime]",
       MultilineFunction->None], "(", "0", ")"}], "\[LongEqual]", 
     RowBox[{"-", "2.7105054312137602`*^-20"}]}]}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436909972*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"NDSolve", "::", "deqn"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"Equation or list of equations expected instead of \
\[NoBreak]\\!\\(\\*FormBox[RowBox[{\\\"EulerEquations\\\", \\\"(\\\", \
RowBox[{RowBox[{RowBox[{\\\"19.6`\\\", \\\" \\\", \\\"cos\\\", \\\" \\\", \
RowBox[{SubscriptBox[\\\"\[Theta]\\\", \\\"1\\\"], \\\"(\\\", \\\"t\\\", \
\\\")\\\"}]}], \\\"+\\\", RowBox[{\\\"9.8`\\\", \\\" \\\", \\\"cos\\\", \\\" \
\\\", RowBox[{SubscriptBox[\\\"\[Theta]\\\", \\\"2\\\"], \\\"(\\\", \
\\\"t\\\", \\\")\\\"}]}], \\\"+\\\", \
SuperscriptBox[RowBox[{SuperscriptBox[SubscriptBox[\\\"\[Theta]\\\", \
\\\"1\\\"], \\\"\[Prime]\\\", Rule[MultilineFunction, None]], \\\"(\\\", \
\\\"t\\\", \\\")\\\"}], \\\"2\\\"], \\\"+\\\", RowBox[{\\\"cos\\\", \\\" \
\\\", RowBox[{\\\"(\\\", RowBox[{RowBox[{SubscriptBox[\\\"\[Theta]\\\", \\\"1\
\\\"], \\\"(\\\", \\\"t\\\", \\\")\\\"}], \\\"-\\\", \
RowBox[{SubscriptBox[\\\"\[Theta]\\\", \\\"2\\\"], \\\"(\\\", \\\"t\\\", \
\\\")\\\"}]}], \\\")\\\"}], \\\" \\\", RowBox[{SuperscriptBox[SubscriptBox[\\\
\"\[Theta]\\\", \\\"1\\\"], \\\"\[Prime]\\\", Rule[MultilineFunction, None]], \
\\\"(\\\", \\\"t\\\", \\\")\\\"}], \\\" \\\", \
RowBox[{SuperscriptBox[SubscriptBox[\\\"\[Theta]\\\", \\\"2\\\"], \
\\\"\[Prime]\\\", Rule[MultilineFunction, None]], \\\"(\\\", \\\"t\\\", \\\")\
\\\"}]}], \\\"+\\\", RowBox[{FractionBox[\\\"1\\\", \\\"2\\\"], \\\" \\\", \
SuperscriptBox[RowBox[{SuperscriptBox[SubscriptBox[\\\"\[Theta]\\\", \
\\\"2\\\"], \\\"\[Prime]\\\", Rule[MultilineFunction, None]], \\\"(\\\", \
\\\"t\\\", \\\")\\\"}], \\\"2\\\"]}]}], \\\",\\\", RowBox[{\\\"\[Theta]\\\", \
\\\"(\\\", \\\"t\\\", \\\")\\\"}], \\\",\\\", \\\"t\\\"}], \\\")\\\"}], \
TraditionalForm]\\)\[NoBreak] in the first argument \
\[NoBreak]\\!\\(\\*FormBox[RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"EulerEquations\\\", \\\"(\\\", RowBox[{RowBox[{RowBox[{\\\
\"19.6`\\\", \\\" \\\", \\\"cos\\\", \\\" \\\", RowBox[{SubscriptBox[\\\"\
\[Theta]\\\", \\\"1\\\"], \\\"(\\\", \\\"t\\\", \\\")\\\"}]}], \\\"+\\\", \
RowBox[{\\\"9.8`\\\", \\\" \\\", \\\"cos\\\", \\\" \\\", \
RowBox[{SubscriptBox[\\\"\[Theta]\\\", \\\"2\\\"], \\\"(\\\", \\\"t\\\", \
\\\")\\\"}]}], \\\"+\\\", SuperscriptBox[RowBox[{SuperscriptBox[SubscriptBox[\
\\\"\[Theta]\\\", \\\"1\\\"], \\\"\[Prime]\\\", Rule[MultilineFunction, \
None]], \\\"(\\\", \\\"t\\\", \\\")\\\"}], \\\"2\\\"], \\\"+\\\", \
RowBox[{\\\"cos\\\", \\\" \\\", RowBox[{\\\"(\\\", \
RowBox[{RowBox[{SubscriptBox[\\\"\[Theta]\\\", \\\"1\\\"], \\\"(\\\", \\\"t\\\
\", \\\")\\\"}], \\\"-\\\", RowBox[{SubscriptBox[\\\"\[Theta]\\\", \
\\\"2\\\"], \\\"(\\\", \\\"t\\\", \\\")\\\"}]}], \\\")\\\"}], \\\" \\\", \
RowBox[{SuperscriptBox[SubscriptBox[\\\"\[Theta]\\\", \\\"1\\\"], \
\\\"\[Prime]\\\", Rule[MultilineFunction, None]], \\\"(\\\", \\\"t\\\", \\\")\
\\\"}], \\\" \\\", RowBox[{SuperscriptBox[SubscriptBox[\\\"\[Theta]\\\", \
\\\"2\\\"], \\\"\[Prime]\\\", Rule[MultilineFunction, None]], \\\"(\\\", \
\\\"t\\\", \\\")\\\"}]}], \\\"+\\\", RowBox[{FractionBox[\\\"1\\\", \
\\\"2\\\"], \\\" \\\", \
SuperscriptBox[RowBox[{SuperscriptBox[SubscriptBox[\\\"\[Theta]\\\", \
\\\"2\\\"], \\\"\[Prime]\\\", Rule[MultilineFunction, None]], \\\"(\\\", \
\\\"t\\\", \\\")\\\"}], \\\"2\\\"]}]}], \\\",\\\", RowBox[{\\\"\[Theta]\\\", \
\\\"(\\\", \\\"t\\\", \\\")\\\"}], \\\",\\\", \\\"t\\\"}], \\\")\\\"}], \\\",\
\\\", RowBox[{RowBox[{\\\"\[Theta]\\\", \\\"(\\\", \\\"0\\\", \\\")\\\"}], \\\
\"\[LongEqual]\\\", \\\"2.9845130209103`\\\"}], \\\",\\\", \
RowBox[{RowBox[{SuperscriptBox[\\\"\[Theta]\\\", \\\"\[Prime]\\\", \
Rule[MultilineFunction, None]], \\\"(\\\", \\\"0\\\", \\\")\\\"}], \\\"\
\[LongEqual]\\\", RowBox[{\\\"-\\\", \\\"2.7105054312137602`*^-20\\\"}]}]}], \
\\\"}\\\"}], TraditionalForm]\\)\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NDSolve/deqn\\\", ButtonNote -> \
\\\"NDSolve::deqn\\\"]\\)\"\>"}], TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.6586544369388523`*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{"NDSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"EulerEquations", "(", 
       RowBox[{
        RowBox[{
         SuperscriptBox[
          RowBox[{
           SuperscriptBox[
            SubscriptBox["\[Theta]", "1"], "\[Prime]",
            MultilineFunction->None], "(", "t", ")"}], "2"], "+", 
         RowBox[{
          FractionBox["1", "2"], " ", 
          SuperscriptBox[
           RowBox[{
            SuperscriptBox[
             SubscriptBox["\[Theta]", "2"], "\[Prime]",
             MultilineFunction->None], "(", "t", ")"}], "2"]}], "+", 
         RowBox[{"cos", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             SubscriptBox["\[Theta]", "1"], "(", "t", ")"}], "-", 
            RowBox[{
             SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], ")"}], " ", 
          RowBox[{
           SuperscriptBox[
            SubscriptBox["\[Theta]", "2"], "\[Prime]",
            MultilineFunction->None], "(", "t", ")"}], " ", 
          RowBox[{
           SuperscriptBox[
            SubscriptBox["\[Theta]", "1"], "\[Prime]",
            MultilineFunction->None], "(", "t", ")"}]}], "+", 
         RowBox[{"19.6`", " ", "cos", " ", 
          RowBox[{
           SubscriptBox["\[Theta]", "1"], "(", "t", ")"}]}], "+", 
         RowBox[{"9.8`", " ", "cos", " ", 
          RowBox[{
           SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}]}], ",", 
        RowBox[{"\[Theta]", "(", "t", ")"}], ",", "t"}], ")"}], ",", 
      RowBox[{
       RowBox[{"\[Theta]", "(", "0", ")"}], "\[LongEqual]", 
       "2.9845130209103`"}], ",", 
      RowBox[{
       RowBox[{
        SuperscriptBox["\[Theta]", "\[Prime]",
         MultilineFunction->None], "(", "0", ")"}], "\[LongEqual]", 
       RowBox[{"-", "2.7105054312137602`*^-20"}]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[Theta]", "1"], "(", "t", ")"}], ",", 
      RowBox[{
       SubscriptBox["\[Theta]", "2"], "(", "t", ")"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "30"}], "}"}]}], "]"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654436953371*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"\[NoBreak]\\!\\(\\*FormBox[RowBox[{\\\"{\\\", \
RowBox[{\\\"NDSolve\\\", \\\"[\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"EulerEquations\\\", \\\"(\\\", RowBox[{RowBox[{RowBox[{\\\
\"19.6`\\\", \\\" \\\", \\\"cos\\\", \\\" \\\", RowBox[{SubscriptBox[\\\"\
\[Theta]\\\", \\\"1\\\"], \\\"(\\\", \\\"t\\\", \\\")\\\"}]}], \\\"+\\\", \
RowBox[{\\\"9.8`\\\", \\\" \\\", \\\"cos\\\", \\\" \\\", \
RowBox[{SubscriptBox[\\\"\[Theta]\\\", \\\"2\\\"], \\\"(\\\", \\\"t\\\", \
\\\")\\\"}]}], \\\"+\\\", SuperscriptBox[RowBox[{\\\"(\\\", \
RowBox[{SuperscriptBox[RowBox[{\\\"Subscript\\\", \\\"[\\\", RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"2\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"\
\[Prime]\\\", Rule[MultilineFunction, None]], \
\\\"\[InvisibleApplication]\\\", RowBox[{\\\"(\\\", \\\"t\\\", \\\")\\\"}]}], \
\\\")\\\"}], \\\"2\\\"], \\\"+\\\", RowBox[{\\\"cos\\\", \\\" \\\", \
RowBox[{\\\"(\\\", RowBox[{RowBox[{RowBox[{\\\"Subscript\\\", \\\"[\\\", \
RowBox[{\\\"\[LeftSkeleton]\\\", \\\"2\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\
\\\"}], \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\
\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"+\\\", RowBox[{\\\"Times\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"2\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}]}], \\\")\\\"}], \\\" \\\", \
RowBox[{SuperscriptBox[RowBox[{\\\"Subscript\\\", \\\"[\\\", RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"2\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"\
\[Prime]\\\", Rule[MultilineFunction, None]], \
\\\"\[InvisibleApplication]\\\", RowBox[{\\\"(\\\", \\\"t\\\", \\\")\\\"}]}], \
\\\" \\\", RowBox[{SuperscriptBox[RowBox[{\\\"Subscript\\\", \\\"[\\\", \
RowBox[{\\\"\[LeftSkeleton]\\\", \\\"2\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\
\\\"}], \\\"\[Prime]\\\", Rule[MultilineFunction, None]], \\\"\
\[InvisibleApplication]\\\", RowBox[{\\\"(\\\", \\\"t\\\", \\\")\\\"}]}]}], \
\\\"+\\\", RowBox[{FractionBox[\\\"1\\\", \\\"2\\\"], \\\" \\\", \
SuperscriptBox[RowBox[{\\\"(\\\", RowBox[{SuperscriptBox[RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], TagBox[RowBox[{\\\
\"(\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \
\\\"\[RightSkeleton]\\\"}], \\\")\\\"}], Derivative], Rule[MultilineFunction, \
None]], \\\"\[InvisibleApplication]\\\", RowBox[{\\\"(\\\", RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\")\\\"}]}], \\\
\")\\\"}], \\\"2\\\"]}]}], \\\",\\\", RowBox[{\\\"\[Theta]\\\", \\\"(\\\", \\\
\"t\\\", \\\")\\\"}], \\\",\\\", \\\"t\\\"}], \\\")\\\"}], \\\",\\\", \
RowBox[{RowBox[{\\\"\[Theta]\\\", \\\"(\\\", \\\"0\\\", \\\")\\\"}], \\\"\
\[LongEqual]\\\", \\\"2.9845130209103`\\\"}], \\\",\\\", \
RowBox[{RowBox[{SuperscriptBox[\\\"\[Theta]\\\", \\\"\[Prime]\\\", \
Rule[MultilineFunction, None]], \\\"(\\\", \\\"0\\\", \\\")\\\"}], \\\"\
\[LongEqual]\\\", RowBox[{\\\"-\\\", \\\"2.7105054312137602`*^-20\\\"}]}]}], \
\\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{RowBox[{SubscriptBox[\\\"\
\[Theta]\\\", \\\"1\\\"], \\\"(\\\", \\\"t\\\", \\\")\\\"}], \\\",\\\", \
RowBox[{SubscriptBox[\\\"\[Theta]\\\", \\\"2\\\"], \\\"(\\\", \\\"t\\\", \
\\\")\\\"}]}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\"t\\\", \
\\\",\\\", \\\"0\\\", \\\",\\\", \\\"30\\\"}], \\\"}\\\"}]}], \\\"]\\\"}], \\\
\"}\\\"}], TraditionalForm]\\)\[NoBreak] is neither a list of replacement \
rules nor a valid dispatch table, and so cannot be used for replacing. \\!\\(\
\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/ReplaceAll/reps\\\", \
ButtonNote -> \\\"ReplaceAll::reps\\\"]\\)\"\>"}], 
  TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.6586544369870167`*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"EulerEquations", "::", "args"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"EulerEquations takes a single integrand, a function or \
list of functions, and a list of variables as input. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:VariationalMethods/ref/EulerEquations\\\", ButtonNote \
-> \\\"VariationalMethods`EulerEquations::args\\\"]\\)\"\>"}], 
  TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.6586544370952044`*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"NDSolve", "::", "dsvar"}], "MessageName"], 
   RowBox[{
   ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*FormBox[\\\"0.0006128571428571429`\\\", \
TraditionalForm]\\)\[NoBreak] cannot be used as a variable. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/NDSolve/dsvar\\\", \
ButtonNote -> \\\"NDSolve::dsvar\\\"]\\)\"\>"}], TraditionalForm]], "Message",\
 "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.658654437117052*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"\[NoBreak]\\!\\(\\*FormBox[RowBox[{\\\"{\\\", \
RowBox[{\\\"NDSolve\\\", \\\"[\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"}\\\"}], \
\\\",\\\", RowBox[{\\\"{\\\", RowBox[{RowBox[{SubscriptBox[\\\"\[Theta]\\\", \
\\\"1\\\"], \\\"(\\\", \\\"0.0006128571428571429`\\\", \\\")\\\"}], \
\\\",\\\", RowBox[{SubscriptBox[\\\"\[Theta]\\\", \\\"2\\\"], \\\"(\\\", \
\\\"0.0006128571428571429`\\\", \\\")\\\"}]}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{\\\"0.0006128571428571429`\\\", \\\",\\\", \\\"0\\\
\", \\\",\\\", \\\"30\\\"}], \\\"}\\\"}]}], \\\"]\\\"}], \\\"}\\\"}], \
TraditionalForm]\\)\[NoBreak] is neither a list of replacement rules nor a \
valid dispatch table, and so cannot be used for replacing. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/ReplaceAll/reps\\\", \
ButtonNote -> \\\"ReplaceAll::reps\\\"]\\)\"\>"}], 
  TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.658654437156499*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"EulerEquations", "::", "args"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"EulerEquations takes a single integrand, a function or \
list of functions, and a list of variables as input. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:VariationalMethods/ref/EulerEquations\\\", ButtonNote \
-> \\\"VariationalMethods`EulerEquations::args\\\"]\\)\"\>"}], 
  TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.6586544372317677`*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"NDSolve", "::", "dsvar"}], "MessageName"], 
   RowBox[{
   ":", " "}], \
"\<\"\[NoBreak]\\!\\(\\*FormBox[\\\"0.0006128571428571429`\\\", \
TraditionalForm]\\)\[NoBreak] cannot be used as a variable. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/NDSolve/dsvar\\\", \
ButtonNote -> \\\"NDSolve::dsvar\\\"]\\)\"\>"}], TraditionalForm]], "Message",\
 "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.658654437256547*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"\[NoBreak]\\!\\(\\*FormBox[RowBox[{\\\"{\\\", \
RowBox[{\\\"NDSolve\\\", \\\"[\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"}\\\"}], \
\\\",\\\", RowBox[{\\\"{\\\", RowBox[{RowBox[{SubscriptBox[\\\"\[Theta]\\\", \
\\\"1\\\"], \\\"(\\\", \\\"0.0006128571428571429`\\\", \\\")\\\"}], \
\\\",\\\", RowBox[{SubscriptBox[\\\"\[Theta]\\\", \\\"2\\\"], \\\"(\\\", \
\\\"0.0006128571428571429`\\\", \\\")\\\"}]}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{\\\"0.0006128571428571429`\\\", \\\",\\\", \\\"0.`\
\\\", \\\",\\\", \\\"30.`\\\"}], \\\"}\\\"}]}], \\\"]\\\"}], \\\"}\\\"}], \
TraditionalForm]\\)\[NoBreak] is neither a list of replacement rules nor a \
valid dispatch table, and so cannot be used for replacing. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/ReplaceAll/reps\\\", \
ButtonNote -> \\\"ReplaceAll::reps\\\"]\\)\"\>"}], 
  TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.658654437272649*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"General", "::", "stop"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*FormBox[StyleBox[RowBox[{\\\"ReplaceAll\\\", \\\"::\\\", \
\\\"reps\\\"}], \\\"MessageName\\\"], TraditionalForm]\\)\[NoBreak] will be \
suppressed during this calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\
\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}], TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.658654437306582*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"EulerEquations", "::", "args"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"EulerEquations takes a single integrand, a function or \
list of functions, and a list of variables as input. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:VariationalMethods/ref/EulerEquations\\\", ButtonNote \
-> \\\"VariationalMethods`EulerEquations::args\\\"]\\)\"\>"}], 
  TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.6586544373778763`*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"General", "::", "stop"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*FormBox[StyleBox[RowBox[{\\\"EulerEquations\\\", \
\\\"::\\\", \\\"args\\\"}], \\\"MessageName\\\"], TraditionalForm]\\)\
\[NoBreak] will be suppressed during this calculation. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}], TraditionalForm]], "Message", \
"MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.6586544374047728`*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"NDSolve", "::", "dsvar"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"\[NoBreak]\\!\\(\\*FormBox[\\\"0.6128577551020409`\\\", \
TraditionalForm]\\)\[NoBreak] cannot be used as a variable. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/NDSolve/dsvar\\\", \
ButtonNote -> \\\"NDSolve::dsvar\\\"]\\)\"\>"}], TraditionalForm]], "Message",\
 "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.658654437421309*^9}],

Cell[BoxData[
 FormBox[
  RowBox[{
   StyleBox[
    RowBox[{"General", "::", "stop"}], "MessageName"], 
   RowBox[{
   ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*FormBox[StyleBox[RowBox[{\\\"NDSolve\\\", \\\"::\\\", \
\\\"dsvar\\\"}], \\\"MessageName\\\"], TraditionalForm]\\)\[NoBreak] will be \
suppressed during this calculation. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\
\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/stop\\\", ButtonNote -> \
\\\"General::stop\\\"]\\)\"\>"}], TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.6586543938812*^9, 3.658654437452333*^9}],

Cell[BoxData[
 FormBox[
  GraphicsBox[{},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{
     FormBox["t", TraditionalForm], 
     FormBox[
      RowBox[{"\[Theta]", "(", "t", ")"}], TraditionalForm]},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None},
   PlotLabel->FormBox[
     RowBox[{"Theoretical", " ", 
       RowBox[{"\[Theta]", "(", "t", ")"}]}], TraditionalForm],
   PlotRange->{All, All},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.6586535065334663`*^9, 3.6586535342331142`*^9}, {
   3.658653727440213*^9, 3.658653752071018*^9}, 3.658653785932268*^9, 
   3.6586539894548264`*^9, 3.658654033445154*^9, {3.658654188175562*^9, 
   3.658654207826939*^9}, {3.658654254849619*^9, 3.658654263887974*^9}, 
   3.658654314612247*^9, 3.658654393662217*^9, 3.658654437487074*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.658653487492722*^9, 3.658653488635268*^9}}],

Cell[BoxData[
 FormBox["\<\"Parameters:\"\>", TraditionalForm]], "Output",
 CellChangeTimes->{{3.658653269596661*^9, 3.6586533127452917`*^9}, {
  3.658653379046713*^9, 3.658653397193842*^9}, {3.658653454469315*^9, 
  3.658653478492827*^9}}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.658653269596661*^9, 3.6586533127452917`*^9}, {
  3.658653379046713*^9, 3.658653397193842*^9}, {3.658653454469315*^9, 
  3.658653478499511*^9}}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.658653269596661*^9, 3.6586533127452917`*^9}, {
  3.658653379046713*^9, 3.658653397193842*^9}, {3.658653454469315*^9, 
  3.658653478503606*^9}}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.658653269596661*^9, 3.6586533127452917`*^9}, {
  3.658653379046713*^9, 3.658653397193842*^9}, {3.658653454469315*^9, 
  3.658653478507093*^9}}],

Cell[BoxData[
 FormBox["1", TraditionalForm]], "Output",
 CellChangeTimes->{{3.658653269596661*^9, 3.6586533127452917`*^9}, {
  3.658653379046713*^9, 3.658653397193842*^9}, {3.658653454469315*^9, 
  3.658653478510579*^9}}],

Cell[BoxData[
 FormBox["9.8`", TraditionalForm]], "Output",
 CellChangeTimes->{{3.658653269596661*^9, 3.6586533127452917`*^9}, {
  3.658653379046713*^9, 3.658653397193842*^9}, {3.658653454469315*^9, 
  3.658653478514389*^9}}],

Cell[BoxData[
 FormBox[
  SuperscriptBox[
   RowBox[{
    SuperscriptBox[
     SubscriptBox["\[Theta]", "1"], "\[Prime]",
     MultilineFunction->None], "(", "t", ")"}], "2"], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.658653269596661*^9, 3.6586533127452917`*^9}, {
  3.658653379046713*^9, 3.658653397193842*^9}, {3.658653454469315*^9, 
  3.658653478518155*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Euler-Lagrange Equations", "Subsection",
 CellChangeTimes->{{3.658653208503928*^9, 3.6586532183342752`*^9}}],

Cell[CellGroupData[{

Cell["Theoretical ", "Subsubsection",
 CellChangeTimes->{{3.658653232845867*^9, 3.658653235181795*^9}}],

Cell[BoxData[""], "Code"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"Times", "[", 
   RowBox[{
    RowBox[{"Times", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{
        RowBox[{"Times", "[", 
         RowBox[{
          RowBox[{"Times", "[", 
           RowBox[{"theta2", ",", " ", "theta2"}], "]"}], ",", " ", 
          RowBox[{"Times", "[", 
           RowBox[{
            RowBox[{"Times", "[", 
             RowBox[{"theta2", ",", " ", "theta2"}], "]"}], ",", " ", 
            RowBox[{"Times", "[", 
             RowBox[{
              RowBox[{"Times", "[", 
               RowBox[{
                RowBox[{"Times", "[", 
                 RowBox[{"theta2", ",", " ", "theta2"}], "]"}], ",", " ", 
                RowBox[{"Times", "[", 
                 RowBox[{"theta1", ",", " ", "theta1"}], "]"}]}], "]"}], ",", 
              " ", 
              RowBox[{"Times", "[", 
               RowBox[{
                RowBox[{"Times", "[", 
                 RowBox[{
                  RowBox[{"Cos", "[", "omega1", "]"}], ",", " ", 
                  RowBox[{"Times", "[", 
                   RowBox[{"theta1", ",", " ", "theta1"}], "]"}]}], "]"}], 
                ",", " ", 
                RowBox[{"Times", "[", 
                 RowBox[{"theta1", ",", " ", "theta1"}], "]"}]}], "]"}]}], 
             "]"}]}], "]"}]}], "]"}], ",", " ", 
        RowBox[{"Times", "[", 
         RowBox[{"theta1", ",", " ", "theta1"}], "]"}]}], "]"}], ",", " ", 
      RowBox[{"Times", "[", 
       RowBox[{
        RowBox[{"Times", "[", 
         RowBox[{
          RowBox[{"Times", "[", 
           RowBox[{"theta2", ",", " ", "theta2"}], "]"}], ",", " ", 
          RowBox[{"Subtract", "[", 
           RowBox[{
            RowBox[{"Sin", "[", "theta1", "]"}], ",", " ", "theta1"}], 
           "]"}]}], "]"}], ",", " ", 
        RowBox[{"Cos", "[", "omega2", "]"}]}], "]"}]}], "]"}], ",", " ", 
    RowBox[{"Times", "[", 
     RowBox[{
      RowBox[{"Times", "[", 
       RowBox[{"theta2", ",", " ", "theta2"}], "]"}], ",", " ", 
      RowBox[{"Times", "[", 
       RowBox[{
        RowBox[{"Times", "[", 
         RowBox[{"theta2", ",", " ", "theta2"}], "]"}], ",", " ", 
        RowBox[{"Times", "[", 
         RowBox[{"theta1", ",", " ", "theta1"}], "]"}]}], "]"}]}], "]"}]}], 
   "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.658223173868088*^9, 3.658223179801313*^9}}],

Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["theta1", "10"], " ", 
   SuperscriptBox["theta2", "12"], " ", 
   RowBox[{"cos", "(", "omega1", ")"}], " ", 
   RowBox[{"cos", "(", "omega2", ")"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"sin", "(", "theta1", ")"}], "-", "theta1"}], ")"}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.658223181818655*^9, 3.658580258236793*^9, 
  3.658582237903544*^9, 3.6585881485573397`*^9, 3.6585961482288113`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{707, 786},
WindowMargins->{{Automatic, 227}, {Automatic, 2}},
FrontEndVersion->"10.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (October 9, \
2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[422, 15, 119, 1, 148, "Title"],
Cell[CellGroupData[{
Cell[566, 20, 98, 1, 65, "Chapter"],
Cell[CellGroupData[{
Cell[689, 25, 98, 1, 64, "Section"],
Cell[CellGroupData[{
Cell[812, 30, 112, 1, 44, "Subsection"],
Cell[927, 33, 84, 1, 30, "Text"],
Cell[1014, 36, 94, 1, 28, "Input"],
Cell[1111, 39, 25, 0, 49, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1173, 44, 124, 1, 44, "Subsection"],
Cell[1300, 47, 25, 0, 49, "Code"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1374, 53, 103, 1, 64, "Section"],
Cell[CellGroupData[{
Cell[1502, 58, 112, 1, 44, "Subsection"],
Cell[1617, 61, 408, 5, 30, "Text"],
Cell[2028, 68, 782, 21, 42, "Text"],
Cell[CellGroupData[{
Cell[2835, 93, 1052, 24, 132, "Code"],
Cell[3890, 119, 238, 4, 28, "Output"],
Cell[4131, 125, 238, 4, 28, "Output"],
Cell[4372, 131, 238, 4, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4647, 140, 915, 24, 98, "Code"],
Cell[5565, 166, 488, 11, 28, "Output"],
Cell[6056, 179, 517, 12, 35, "Output"],
Cell[6576, 193, 514, 12, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7127, 210, 830, 15, 66, "Code"],
Cell[7960, 227, 1145, 29, 228, "Output"],
Cell[9108, 258, 1210, 31, 243, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10355, 294, 276, 6, 50, "Code"],
Cell[10634, 302, 948, 26, 243, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11631, 334, 169, 2, 44, "Subsection"],
Cell[11803, 338, 2851, 59, 50, "Code"],
Cell[CellGroupData[{
Cell[14679, 401, 2918, 71, 114, "Code"],
Cell[17600, 474, 1582, 34, 226, "Output"],
Cell[19185, 510, 1582, 34, 226, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[20816, 550, 112, 1, 44, "Subsection"],
Cell[20931, 553, 147, 2, 49, "Code"],
Cell[CellGroupData[{
Cell[21103, 559, 130, 2, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[21258, 565, 5440, 123, 404, "Code"],
Cell[26701, 690, 1251, 18, 28, "Output"],
Cell[27955, 710, 1249, 18, 28, "Output"],
Cell[29207, 730, 1252, 18, 28, "Output"],
Cell[30462, 750, 1322, 19, 28, "Output"],
Cell[31787, 771, 1641, 32, 47, "Output"],
Cell[33431, 805, 1575, 29, 33, "Output"],
Cell[35009, 836, 1600, 30, 49, "Output"],
Cell[36612, 868, 1605, 31, 47, "Output"],
Cell[38220, 901, 1520, 27, 31, "Output"],
Cell[39743, 930, 1878, 38, 35, "Output"],
Cell[41624, 970, 13081, 244, 65, "Output"],
Cell[54708, 1216, 41911, 699, 260, "Output"]
}, Open  ]],
Cell[96634, 1918, 40976, 686, 260, "Input"],
Cell[CellGroupData[{
Cell[137635, 2608, 273, 4, 67, "Code"],
Cell[137911, 2614, 337, 6, 47, "Output"]
}, Open  ]],
Cell[138263, 2623, 87, 1, 46, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138387, 2629, 105, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[138517, 2634, 4281, 101, 286, "Code"],
Cell[142801, 2737, 1075, 22, 35, "Output"],
Cell[143879, 2761, 1182, 25, 35, "Output"],
Cell[145064, 2788, 1325, 29, 35, "Output"],
Cell[146392, 2819, 1727, 39, 55, "Output"],
Cell[148122, 2860, 2123, 50, 58, "Output"],
Cell[150248, 2912, 12486, 237, 65, "Output"],
Cell[162737, 3151, 33436, 562, 265, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[196210, 3718, 795, 23, 50, "Code"],
Cell[197008, 3743, 72527, 1205, 265, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[269608, 4956, 103, 1, 64, "Section"],
Cell[CellGroupData[{
Cell[269736, 4961, 108, 1, 44, "Subsection"],
Cell[269847, 4964, 157, 3, 30, "Text"],
Cell[270007, 4969, 1806, 56, 74, "Text"],
Cell[CellGroupData[{
Cell[271838, 5029, 6733, 208, 610, "Code"],
Cell[278574, 5239, 432, 6, 28, "Output"],
Cell[279009, 5247, 413, 6, 28, "Output"],
Cell[279425, 5255, 414, 6, 28, "Output"],
Cell[279842, 5263, 414, 6, 28, "Output"],
Cell[280259, 5271, 414, 6, 28, "Output"],
Cell[280676, 5279, 417, 6, 28, "Output"],
Cell[281096, 5287, 1521, 41, 47, "Output"],
Cell[282620, 5330, 2554, 68, 58, "Output"],
Cell[285177, 5400, 4584, 121, 110, "Output"],
Cell[289764, 5523, 1516, 41, 47, "Output"],
Cell[291283, 5566, 591, 12, 42, "Message"],
Cell[291877, 5580, 1696, 44, 48, "Output"],
Cell[293576, 5626, 2107, 54, 77, "Output"],
Cell[295686, 5682, 4121, 62, 140, "Message"],
Cell[299810, 5746, 2514, 64, 114, "Output"],
Cell[302327, 5812, 3879, 58, 144, "Message"],
Cell[306209, 5872, 593, 12, 42, "Message"],
Cell[306805, 5886, 560, 13, 24, "Message"],
Cell[307368, 5901, 1228, 21, 60, "Message"],
Cell[308599, 5924, 593, 12, 42, "Message"],
Cell[309195, 5938, 560, 13, 24, "Message"],
Cell[309758, 5953, 1232, 21, 60, "Message"],
Cell[310993, 5976, 644, 13, 24, "Message"],
Cell[311640, 5991, 593, 12, 42, "Message"],
Cell[312236, 6005, 652, 14, 24, "Message"],
Cell[312891, 6021, 555, 12, 24, "Message"],
Cell[313449, 6035, 642, 13, 24, "Message"],
Cell[314094, 6050, 1388, 35, 263, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[315519, 6090, 92, 1, 28, "Input"],
Cell[315614, 6093, 240, 4, 28, "Output"],
Cell[315857, 6099, 222, 4, 28, "Output"],
Cell[316082, 6105, 222, 4, 28, "Output"],
Cell[316307, 6111, 222, 4, 28, "Output"],
Cell[316532, 6117, 222, 4, 28, "Output"],
Cell[316757, 6123, 225, 4, 28, "Output"],
Cell[316985, 6129, 373, 10, 33, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[317407, 6145, 114, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[317546, 6150, 103, 1, 35, "Subsubsection"],
Cell[317652, 6153, 25, 0, 49, "Code"],
Cell[CellGroupData[{
Cell[317702, 6157, 2364, 60, 50, "Code"],
Cell[320069, 6219, 475, 12, 33, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

